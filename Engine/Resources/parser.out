Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CONTINUE

Grammar

Rule 0     S' -> expressions
Rule 1     expression -> PASS
Rule 2     expression -> MACRO = expression
Rule 3     expression -> MACRO
Rule 4     atom -> VARIABLE = expression
Rule 5     atom -> VARIABLE
Rule 6     else_branch -> ELSE scope
Rule 7     elif_branch -> ELSEIF ( expression ) scope elif_branch
Rule 8     elif_branch -> ELSEIF ( expression ) scope else_branch
Rule 9     elif_branch -> ELSEIF ( expression ) scope
Rule 10    if_condition -> IF ( expression ) scope elif_branch
Rule 11    if_condition -> IF ( expression ) scope else_branch
Rule 12    if_condition -> IF ( expression ) scope
Rule 13    while_loop -> WHILE ( expression ) scope
Rule 14    function_call -> FUNCTION parameters scope
Rule 15    function_call -> FUNCTION parameters tag_list
Rule 16    function_call -> FUNCTION parameters
Rule 17    function_call -> FUNCTION
Rule 18    tag -> TAG expression
Rule 19    tag_list -> tag # scope tag_list
Rule 20    tag_list -> tag # scope
Rule 21    scope -> { expressions }
Rule 22    scope -> { }
Rule 23    expressions -> statement expressions
Rule 24    expressions -> statement
Rule 25    expressions -> <empty>
Rule 26    parameters -> ( param_element )
Rule 27    parameters -> ( )
Rule 28    param_element_pos -> WORD = expression , param_element_pos
Rule 29    param_element_pos -> WORD = expression ,
Rule 30    param_element_pos -> WORD = expression
Rule 31    param_element -> expression , param_element
Rule 32    param_element -> expression , param_element_pos
Rule 33    param_element -> expression ,
Rule 34    param_element -> expression
Rule 35    statement -> BREAK
Rule 36    statement -> expression
Rule 37    statement -> if_condition
Rule 38    statement -> while_loop
Rule 39    atom -> function_call
Rule 40    comp -> NOT comp
Rule 41    comp -> arith LT arith
Rule 42    comp -> arith LE arith
Rule 43    comp -> arith GT arith
Rule 44    comp -> arith GE arith
Rule 45    comp -> arith EE arith
Rule 46    comp -> arith NE arith
Rule 47    comp -> comp AND comp
Rule 48    comp -> comp OR comp
Rule 49    comp -> arith
Rule 50    arith -> atom + atom
Rule 51    arith -> atom - atom
Rule 52    arith -> atom * atom
Rule 53    arith -> atom / atom
Rule 54    arith -> atom % atom
Rule 55    arith -> atom & atom
Rule 56    arith -> atom | atom
Rule 57    arith -> atom ^ atom
Rule 58    arith -> atom POW atom
Rule 59    arith -> atom
Rule 60    atom -> - atom
Rule 61    comma_expressions -> expression , comma_expressions
Rule 62    comma_expressions -> expression ,
Rule 63    comma_expressions -> expression
Rule 64    arith -> MIN ( comma_expressions )
Rule 65    arith -> MAX ( comma_expressions )
Rule 66    atom -> ( expression )
Rule 67    statement -> RETURN expression
Rule 68    statement -> RETURN
Rule 69    table_contents -> STRING : expression , table_contents
Rule 70    table_contents -> NUMBER : expression , table_contents
Rule 71    table_contents -> STRING : expression ,
Rule 72    table_contents -> NUMBER : expression ,
Rule 73    table_contents -> STRING : expression
Rule 74    table_contents -> NUMBER : expression
Rule 75    table -> % [ comma_expressions ]
Rule 76    table -> % { table_contents }
Rule 77    atom -> NUMBER
Rule 78    atom -> BOOLEAN
Rule 79    atom -> STRING
Rule 80    atom -> table
Rule 81    atom -> WORD
Rule 82    atom -> scope
Rule 83    expression -> comp

Terminals, with rules where they appear

#                    : 19 20
%                    : 54 75 76
&                    : 55
(                    : 7 8 9 10 11 12 13 26 27 64 65 66
)                    : 7 8 9 10 11 12 13 26 27 64 65 66
*                    : 52
+                    : 50
,                    : 28 29 31 32 33 61 62 69 70 71 72
-                    : 51 60
/                    : 53
:                    : 69 70 71 72 73 74
=                    : 2 4 28 29 30
AND                  : 47
BOOLEAN              : 78
BREAK                : 35
CONTINUE             : 
EE                   : 45
ELSE                 : 6
ELSEIF               : 7 8 9
FUNCTION             : 14 15 16 17
GE                   : 44
GT                   : 43
IF                   : 10 11 12
LE                   : 42
LT                   : 41
MACRO                : 2 3
MAX                  : 65
MIN                  : 64
NE                   : 46
NOT                  : 40
NUMBER               : 70 72 74 77
OR                   : 48
PASS                 : 1
POW                  : 58
RETURN               : 67 68
STRING               : 69 71 73 79
TAG                  : 18
VARIABLE             : 4 5
WHILE                : 13
WORD                 : 28 29 30 81
[                    : 75
]                    : 75
^                    : 57
error                : 
{                    : 21 22 76
|                    : 56
}                    : 21 22 76

Nonterminals, with rules where they appear

arith                : 41 41 42 42 43 43 44 44 45 45 46 46 49
atom                 : 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 60
comma_expressions    : 61 64 65 75
comp                 : 40 47 47 48 48 83
elif_branch          : 7 10
else_branch          : 8 11
expression           : 2 4 7 8 9 10 11 12 13 18 28 29 30 31 32 33 34 36 61 62 63 66 67 69 70 71 72 73 74
expressions          : 21 23 0
function_call        : 39
if_condition         : 37
param_element        : 26 31
param_element_pos    : 28 32
parameters           : 14 15 16
scope                : 6 7 8 9 10 11 12 13 14 19 20 82
statement            : 23 24
table                : 80
table_contents       : 69 70 76
tag                  : 19 20
tag_list             : 15 19
while_loop           : 38

Parsing method: LALR

state 0

    (0) S' -> . expressions
    (23) expressions -> . statement expressions
    (24) expressions -> . statement
    (25) expressions -> .
    (35) statement -> . BREAK
    (36) statement -> . expression
    (37) statement -> . if_condition
    (38) statement -> . while_loop
    (67) statement -> . RETURN expression
    (68) statement -> . RETURN
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (10) if_condition -> . IF ( expression ) scope elif_branch
    (11) if_condition -> . IF ( expression ) scope else_branch
    (12) if_condition -> . IF ( expression ) scope
    (13) while_loop -> . WHILE ( expression ) scope
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    $end            reduce using rule 25 (expressions -> .)
    BREAK           shift and go to state 3
    RETURN          shift and go to state 7
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expressions                    shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_condition                   shift and go to state 5
    while_loop                     shift and go to state 6
    comp                           shift and go to state 10
    scope                          shift and go to state 13
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 1

    (0) S' -> expressions .



state 2

    (23) expressions -> statement . expressions
    (24) expressions -> statement .
    (23) expressions -> . statement expressions
    (24) expressions -> . statement
    (25) expressions -> .
    (35) statement -> . BREAK
    (36) statement -> . expression
    (37) statement -> . if_condition
    (38) statement -> . while_loop
    (67) statement -> . RETURN expression
    (68) statement -> . RETURN
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (10) if_condition -> . IF ( expression ) scope elif_branch
    (11) if_condition -> . IF ( expression ) scope else_branch
    (12) if_condition -> . IF ( expression ) scope
    (13) while_loop -> . WHILE ( expression ) scope
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

  ! reduce/reduce conflict for $end resolved using rule 24 (expressions -> statement .)
  ! reduce/reduce conflict for } resolved using rule 24 (expressions -> statement .)
    $end            reduce using rule 24 (expressions -> statement .)
    }               reduce using rule 24 (expressions -> statement .)
    BREAK           shift and go to state 3
    RETURN          shift and go to state 7
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

  ! $end            [ reduce using rule 25 (expressions -> .) ]
  ! }               [ reduce using rule 25 (expressions -> .) ]

    statement                      shift and go to state 2
    expressions                    shift and go to state 31
    expression                     shift and go to state 4
    if_condition                   shift and go to state 5
    while_loop                     shift and go to state 6
    comp                           shift and go to state 10
    scope                          shift and go to state 13
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 3

    (35) statement -> BREAK .

    BREAK           reduce using rule 35 (statement -> BREAK .)
    RETURN          reduce using rule 35 (statement -> BREAK .)
    PASS            reduce using rule 35 (statement -> BREAK .)
    MACRO           reduce using rule 35 (statement -> BREAK .)
    IF              reduce using rule 35 (statement -> BREAK .)
    WHILE           reduce using rule 35 (statement -> BREAK .)
    NOT             reduce using rule 35 (statement -> BREAK .)
    MIN             reduce using rule 35 (statement -> BREAK .)
    MAX             reduce using rule 35 (statement -> BREAK .)
    VARIABLE        reduce using rule 35 (statement -> BREAK .)
    -               reduce using rule 35 (statement -> BREAK .)
    (               reduce using rule 35 (statement -> BREAK .)
    NUMBER          reduce using rule 35 (statement -> BREAK .)
    BOOLEAN         reduce using rule 35 (statement -> BREAK .)
    STRING          reduce using rule 35 (statement -> BREAK .)
    WORD            reduce using rule 35 (statement -> BREAK .)
    FUNCTION        reduce using rule 35 (statement -> BREAK .)
    %               reduce using rule 35 (statement -> BREAK .)
    {               reduce using rule 35 (statement -> BREAK .)
    $end            reduce using rule 35 (statement -> BREAK .)
    }               reduce using rule 35 (statement -> BREAK .)


state 4

    (36) statement -> expression .

    BREAK           reduce using rule 36 (statement -> expression .)
    RETURN          reduce using rule 36 (statement -> expression .)
    PASS            reduce using rule 36 (statement -> expression .)
    MACRO           reduce using rule 36 (statement -> expression .)
    IF              reduce using rule 36 (statement -> expression .)
    WHILE           reduce using rule 36 (statement -> expression .)
    NOT             reduce using rule 36 (statement -> expression .)
    MIN             reduce using rule 36 (statement -> expression .)
    MAX             reduce using rule 36 (statement -> expression .)
    VARIABLE        reduce using rule 36 (statement -> expression .)
    -               reduce using rule 36 (statement -> expression .)
    (               reduce using rule 36 (statement -> expression .)
    NUMBER          reduce using rule 36 (statement -> expression .)
    BOOLEAN         reduce using rule 36 (statement -> expression .)
    STRING          reduce using rule 36 (statement -> expression .)
    WORD            reduce using rule 36 (statement -> expression .)
    FUNCTION        reduce using rule 36 (statement -> expression .)
    %               reduce using rule 36 (statement -> expression .)
    {               reduce using rule 36 (statement -> expression .)
    $end            reduce using rule 36 (statement -> expression .)
    }               reduce using rule 36 (statement -> expression .)


state 5

    (37) statement -> if_condition .

    BREAK           reduce using rule 37 (statement -> if_condition .)
    RETURN          reduce using rule 37 (statement -> if_condition .)
    PASS            reduce using rule 37 (statement -> if_condition .)
    MACRO           reduce using rule 37 (statement -> if_condition .)
    IF              reduce using rule 37 (statement -> if_condition .)
    WHILE           reduce using rule 37 (statement -> if_condition .)
    NOT             reduce using rule 37 (statement -> if_condition .)
    MIN             reduce using rule 37 (statement -> if_condition .)
    MAX             reduce using rule 37 (statement -> if_condition .)
    VARIABLE        reduce using rule 37 (statement -> if_condition .)
    -               reduce using rule 37 (statement -> if_condition .)
    (               reduce using rule 37 (statement -> if_condition .)
    NUMBER          reduce using rule 37 (statement -> if_condition .)
    BOOLEAN         reduce using rule 37 (statement -> if_condition .)
    STRING          reduce using rule 37 (statement -> if_condition .)
    WORD            reduce using rule 37 (statement -> if_condition .)
    FUNCTION        reduce using rule 37 (statement -> if_condition .)
    %               reduce using rule 37 (statement -> if_condition .)
    {               reduce using rule 37 (statement -> if_condition .)
    $end            reduce using rule 37 (statement -> if_condition .)
    }               reduce using rule 37 (statement -> if_condition .)


state 6

    (38) statement -> while_loop .

    BREAK           reduce using rule 38 (statement -> while_loop .)
    RETURN          reduce using rule 38 (statement -> while_loop .)
    PASS            reduce using rule 38 (statement -> while_loop .)
    MACRO           reduce using rule 38 (statement -> while_loop .)
    IF              reduce using rule 38 (statement -> while_loop .)
    WHILE           reduce using rule 38 (statement -> while_loop .)
    NOT             reduce using rule 38 (statement -> while_loop .)
    MIN             reduce using rule 38 (statement -> while_loop .)
    MAX             reduce using rule 38 (statement -> while_loop .)
    VARIABLE        reduce using rule 38 (statement -> while_loop .)
    -               reduce using rule 38 (statement -> while_loop .)
    (               reduce using rule 38 (statement -> while_loop .)
    NUMBER          reduce using rule 38 (statement -> while_loop .)
    BOOLEAN         reduce using rule 38 (statement -> while_loop .)
    STRING          reduce using rule 38 (statement -> while_loop .)
    WORD            reduce using rule 38 (statement -> while_loop .)
    FUNCTION        reduce using rule 38 (statement -> while_loop .)
    %               reduce using rule 38 (statement -> while_loop .)
    {               reduce using rule 38 (statement -> while_loop .)
    $end            reduce using rule 38 (statement -> while_loop .)
    }               reduce using rule 38 (statement -> while_loop .)


state 7

    (67) statement -> RETURN . expression
    (68) statement -> RETURN .
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

  ! shift/reduce conflict for PASS resolved as shift
  ! shift/reduce conflict for MACRO resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAX resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for WORD resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for { resolved as shift
    BREAK           reduce using rule 68 (statement -> RETURN .)
    RETURN          reduce using rule 68 (statement -> RETURN .)
    IF              reduce using rule 68 (statement -> RETURN .)
    WHILE           reduce using rule 68 (statement -> RETURN .)
    $end            reduce using rule 68 (statement -> RETURN .)
    }               reduce using rule 68 (statement -> RETURN .)
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

  ! PASS            [ reduce using rule 68 (statement -> RETURN .) ]
  ! MACRO           [ reduce using rule 68 (statement -> RETURN .) ]
  ! NOT             [ reduce using rule 68 (statement -> RETURN .) ]
  ! MIN             [ reduce using rule 68 (statement -> RETURN .) ]
  ! MAX             [ reduce using rule 68 (statement -> RETURN .) ]
  ! VARIABLE        [ reduce using rule 68 (statement -> RETURN .) ]
  ! -               [ reduce using rule 68 (statement -> RETURN .) ]
  ! (               [ reduce using rule 68 (statement -> RETURN .) ]
  ! NUMBER          [ reduce using rule 68 (statement -> RETURN .) ]
  ! BOOLEAN         [ reduce using rule 68 (statement -> RETURN .) ]
  ! STRING          [ reduce using rule 68 (statement -> RETURN .) ]
  ! WORD            [ reduce using rule 68 (statement -> RETURN .) ]
  ! FUNCTION        [ reduce using rule 68 (statement -> RETURN .) ]
  ! %               [ reduce using rule 68 (statement -> RETURN .) ]
  ! {               [ reduce using rule 68 (statement -> RETURN .) ]

    expression                     shift and go to state 32
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 8

    (1) expression -> PASS .

    BREAK           reduce using rule 1 (expression -> PASS .)
    RETURN          reduce using rule 1 (expression -> PASS .)
    PASS            reduce using rule 1 (expression -> PASS .)
    MACRO           reduce using rule 1 (expression -> PASS .)
    IF              reduce using rule 1 (expression -> PASS .)
    WHILE           reduce using rule 1 (expression -> PASS .)
    NOT             reduce using rule 1 (expression -> PASS .)
    MIN             reduce using rule 1 (expression -> PASS .)
    MAX             reduce using rule 1 (expression -> PASS .)
    VARIABLE        reduce using rule 1 (expression -> PASS .)
    -               reduce using rule 1 (expression -> PASS .)
    (               reduce using rule 1 (expression -> PASS .)
    NUMBER          reduce using rule 1 (expression -> PASS .)
    BOOLEAN         reduce using rule 1 (expression -> PASS .)
    STRING          reduce using rule 1 (expression -> PASS .)
    WORD            reduce using rule 1 (expression -> PASS .)
    FUNCTION        reduce using rule 1 (expression -> PASS .)
    %               reduce using rule 1 (expression -> PASS .)
    {               reduce using rule 1 (expression -> PASS .)
    $end            reduce using rule 1 (expression -> PASS .)
    }               reduce using rule 1 (expression -> PASS .)
    )               reduce using rule 1 (expression -> PASS .)
    AND             reduce using rule 1 (expression -> PASS .)
    OR              reduce using rule 1 (expression -> PASS .)
    ,               reduce using rule 1 (expression -> PASS .)
    ]               reduce using rule 1 (expression -> PASS .)
    +               reduce using rule 1 (expression -> PASS .)
    *               reduce using rule 1 (expression -> PASS .)
    /               reduce using rule 1 (expression -> PASS .)
    &               reduce using rule 1 (expression -> PASS .)
    |               reduce using rule 1 (expression -> PASS .)
    ^               reduce using rule 1 (expression -> PASS .)
    POW             reduce using rule 1 (expression -> PASS .)
    LT              reduce using rule 1 (expression -> PASS .)
    LE              reduce using rule 1 (expression -> PASS .)
    GT              reduce using rule 1 (expression -> PASS .)
    GE              reduce using rule 1 (expression -> PASS .)
    EE              reduce using rule 1 (expression -> PASS .)
    NE              reduce using rule 1 (expression -> PASS .)
    #               reduce using rule 1 (expression -> PASS .)


state 9

    (2) expression -> MACRO . = expression
    (3) expression -> MACRO .

    =               shift and go to state 33
    BREAK           reduce using rule 3 (expression -> MACRO .)
    RETURN          reduce using rule 3 (expression -> MACRO .)
    PASS            reduce using rule 3 (expression -> MACRO .)
    MACRO           reduce using rule 3 (expression -> MACRO .)
    IF              reduce using rule 3 (expression -> MACRO .)
    WHILE           reduce using rule 3 (expression -> MACRO .)
    NOT             reduce using rule 3 (expression -> MACRO .)
    MIN             reduce using rule 3 (expression -> MACRO .)
    MAX             reduce using rule 3 (expression -> MACRO .)
    VARIABLE        reduce using rule 3 (expression -> MACRO .)
    -               reduce using rule 3 (expression -> MACRO .)
    (               reduce using rule 3 (expression -> MACRO .)
    NUMBER          reduce using rule 3 (expression -> MACRO .)
    BOOLEAN         reduce using rule 3 (expression -> MACRO .)
    STRING          reduce using rule 3 (expression -> MACRO .)
    WORD            reduce using rule 3 (expression -> MACRO .)
    FUNCTION        reduce using rule 3 (expression -> MACRO .)
    %               reduce using rule 3 (expression -> MACRO .)
    {               reduce using rule 3 (expression -> MACRO .)
    $end            reduce using rule 3 (expression -> MACRO .)
    }               reduce using rule 3 (expression -> MACRO .)
    )               reduce using rule 3 (expression -> MACRO .)
    AND             reduce using rule 3 (expression -> MACRO .)
    OR              reduce using rule 3 (expression -> MACRO .)
    ,               reduce using rule 3 (expression -> MACRO .)
    ]               reduce using rule 3 (expression -> MACRO .)
    +               reduce using rule 3 (expression -> MACRO .)
    *               reduce using rule 3 (expression -> MACRO .)
    /               reduce using rule 3 (expression -> MACRO .)
    &               reduce using rule 3 (expression -> MACRO .)
    |               reduce using rule 3 (expression -> MACRO .)
    ^               reduce using rule 3 (expression -> MACRO .)
    POW             reduce using rule 3 (expression -> MACRO .)
    LT              reduce using rule 3 (expression -> MACRO .)
    LE              reduce using rule 3 (expression -> MACRO .)
    GT              reduce using rule 3 (expression -> MACRO .)
    GE              reduce using rule 3 (expression -> MACRO .)
    EE              reduce using rule 3 (expression -> MACRO .)
    NE              reduce using rule 3 (expression -> MACRO .)
    #               reduce using rule 3 (expression -> MACRO .)


state 10

    (83) expression -> comp .
    (47) comp -> comp . AND comp
    (48) comp -> comp . OR comp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 83 (expression -> comp .)
    RETURN          reduce using rule 83 (expression -> comp .)
    PASS            reduce using rule 83 (expression -> comp .)
    MACRO           reduce using rule 83 (expression -> comp .)
    IF              reduce using rule 83 (expression -> comp .)
    WHILE           reduce using rule 83 (expression -> comp .)
    NOT             reduce using rule 83 (expression -> comp .)
    MIN             reduce using rule 83 (expression -> comp .)
    MAX             reduce using rule 83 (expression -> comp .)
    VARIABLE        reduce using rule 83 (expression -> comp .)
    -               reduce using rule 83 (expression -> comp .)
    (               reduce using rule 83 (expression -> comp .)
    NUMBER          reduce using rule 83 (expression -> comp .)
    BOOLEAN         reduce using rule 83 (expression -> comp .)
    STRING          reduce using rule 83 (expression -> comp .)
    WORD            reduce using rule 83 (expression -> comp .)
    FUNCTION        reduce using rule 83 (expression -> comp .)
    %               reduce using rule 83 (expression -> comp .)
    {               reduce using rule 83 (expression -> comp .)
    $end            reduce using rule 83 (expression -> comp .)
    }               reduce using rule 83 (expression -> comp .)
    )               reduce using rule 83 (expression -> comp .)
    ,               reduce using rule 83 (expression -> comp .)
    ]               reduce using rule 83 (expression -> comp .)
    +               reduce using rule 83 (expression -> comp .)
    *               reduce using rule 83 (expression -> comp .)
    /               reduce using rule 83 (expression -> comp .)
    &               reduce using rule 83 (expression -> comp .)
    |               reduce using rule 83 (expression -> comp .)
    ^               reduce using rule 83 (expression -> comp .)
    POW             reduce using rule 83 (expression -> comp .)
    LT              reduce using rule 83 (expression -> comp .)
    LE              reduce using rule 83 (expression -> comp .)
    GT              reduce using rule 83 (expression -> comp .)
    GE              reduce using rule 83 (expression -> comp .)
    EE              reduce using rule 83 (expression -> comp .)
    NE              reduce using rule 83 (expression -> comp .)
    #               reduce using rule 83 (expression -> comp .)
    AND             shift and go to state 34
    OR              shift and go to state 35

  ! AND             [ reduce using rule 83 (expression -> comp .) ]
  ! OR              [ reduce using rule 83 (expression -> comp .) ]


state 11

    (10) if_condition -> IF . ( expression ) scope elif_branch
    (11) if_condition -> IF . ( expression ) scope else_branch
    (12) if_condition -> IF . ( expression ) scope

    (               shift and go to state 36


state 12

    (66) atom -> ( . expression )
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 37
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 13

    (82) atom -> scope .

    +               reduce using rule 82 (atom -> scope .)
    -               reduce using rule 82 (atom -> scope .)
    *               reduce using rule 82 (atom -> scope .)
    /               reduce using rule 82 (atom -> scope .)
    %               reduce using rule 82 (atom -> scope .)
    &               reduce using rule 82 (atom -> scope .)
    |               reduce using rule 82 (atom -> scope .)
    ^               reduce using rule 82 (atom -> scope .)
    POW             reduce using rule 82 (atom -> scope .)
    LT              reduce using rule 82 (atom -> scope .)
    LE              reduce using rule 82 (atom -> scope .)
    GT              reduce using rule 82 (atom -> scope .)
    GE              reduce using rule 82 (atom -> scope .)
    EE              reduce using rule 82 (atom -> scope .)
    NE              reduce using rule 82 (atom -> scope .)
    AND             reduce using rule 82 (atom -> scope .)
    OR              reduce using rule 82 (atom -> scope .)
    BREAK           reduce using rule 82 (atom -> scope .)
    RETURN          reduce using rule 82 (atom -> scope .)
    PASS            reduce using rule 82 (atom -> scope .)
    MACRO           reduce using rule 82 (atom -> scope .)
    IF              reduce using rule 82 (atom -> scope .)
    WHILE           reduce using rule 82 (atom -> scope .)
    NOT             reduce using rule 82 (atom -> scope .)
    MIN             reduce using rule 82 (atom -> scope .)
    MAX             reduce using rule 82 (atom -> scope .)
    VARIABLE        reduce using rule 82 (atom -> scope .)
    (               reduce using rule 82 (atom -> scope .)
    NUMBER          reduce using rule 82 (atom -> scope .)
    BOOLEAN         reduce using rule 82 (atom -> scope .)
    STRING          reduce using rule 82 (atom -> scope .)
    WORD            reduce using rule 82 (atom -> scope .)
    FUNCTION        reduce using rule 82 (atom -> scope .)
    {               reduce using rule 82 (atom -> scope .)
    $end            reduce using rule 82 (atom -> scope .)
    }               reduce using rule 82 (atom -> scope .)
    )               reduce using rule 82 (atom -> scope .)
    ,               reduce using rule 82 (atom -> scope .)
    ]               reduce using rule 82 (atom -> scope .)
    #               reduce using rule 82 (atom -> scope .)


state 14

    (13) while_loop -> WHILE . ( expression ) scope

    (               shift and go to state 38


state 15

    (40) comp -> NOT . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comp                           shift and go to state 39
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 16

    (41) comp -> arith . LT arith
    (42) comp -> arith . LE arith
    (43) comp -> arith . GT arith
    (44) comp -> arith . GE arith
    (45) comp -> arith . EE arith
    (46) comp -> arith . NE arith
    (49) comp -> arith .

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LT              shift and go to state 40
    LE              shift and go to state 41
    GT              shift and go to state 42
    GE              shift and go to state 43
    EE              shift and go to state 44
    NE              shift and go to state 45
    AND             reduce using rule 49 (comp -> arith .)
    OR              reduce using rule 49 (comp -> arith .)
    BREAK           reduce using rule 49 (comp -> arith .)
    RETURN          reduce using rule 49 (comp -> arith .)
    PASS            reduce using rule 49 (comp -> arith .)
    MACRO           reduce using rule 49 (comp -> arith .)
    IF              reduce using rule 49 (comp -> arith .)
    WHILE           reduce using rule 49 (comp -> arith .)
    NOT             reduce using rule 49 (comp -> arith .)
    MIN             reduce using rule 49 (comp -> arith .)
    MAX             reduce using rule 49 (comp -> arith .)
    VARIABLE        reduce using rule 49 (comp -> arith .)
    -               reduce using rule 49 (comp -> arith .)
    (               reduce using rule 49 (comp -> arith .)
    NUMBER          reduce using rule 49 (comp -> arith .)
    BOOLEAN         reduce using rule 49 (comp -> arith .)
    STRING          reduce using rule 49 (comp -> arith .)
    WORD            reduce using rule 49 (comp -> arith .)
    FUNCTION        reduce using rule 49 (comp -> arith .)
    %               reduce using rule 49 (comp -> arith .)
    {               reduce using rule 49 (comp -> arith .)
    $end            reduce using rule 49 (comp -> arith .)
    }               reduce using rule 49 (comp -> arith .)
    )               reduce using rule 49 (comp -> arith .)
    ,               reduce using rule 49 (comp -> arith .)
    ]               reduce using rule 49 (comp -> arith .)
    +               reduce using rule 49 (comp -> arith .)
    *               reduce using rule 49 (comp -> arith .)
    /               reduce using rule 49 (comp -> arith .)
    &               reduce using rule 49 (comp -> arith .)
    |               reduce using rule 49 (comp -> arith .)
    ^               reduce using rule 49 (comp -> arith .)
    POW             reduce using rule 49 (comp -> arith .)
    #               reduce using rule 49 (comp -> arith .)

  ! LT              [ reduce using rule 49 (comp -> arith .) ]
  ! LE              [ reduce using rule 49 (comp -> arith .) ]
  ! GT              [ reduce using rule 49 (comp -> arith .) ]
  ! GE              [ reduce using rule 49 (comp -> arith .) ]
  ! EE              [ reduce using rule 49 (comp -> arith .) ]
  ! NE              [ reduce using rule 49 (comp -> arith .) ]


state 17

    (50) arith -> atom . + atom
    (51) arith -> atom . - atom
    (52) arith -> atom . * atom
    (53) arith -> atom . / atom
    (54) arith -> atom . % atom
    (55) arith -> atom . & atom
    (56) arith -> atom . | atom
    (57) arith -> atom . ^ atom
    (58) arith -> atom . POW atom
    (59) arith -> atom .

  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    +               shift and go to state 46
    -               shift and go to state 47
    *               shift and go to state 48
    /               shift and go to state 49
    %               shift and go to state 50
    &               shift and go to state 51
    |               shift and go to state 52
    ^               shift and go to state 53
    POW             shift and go to state 54
    LT              reduce using rule 59 (arith -> atom .)
    LE              reduce using rule 59 (arith -> atom .)
    GT              reduce using rule 59 (arith -> atom .)
    GE              reduce using rule 59 (arith -> atom .)
    EE              reduce using rule 59 (arith -> atom .)
    NE              reduce using rule 59 (arith -> atom .)
    AND             reduce using rule 59 (arith -> atom .)
    OR              reduce using rule 59 (arith -> atom .)
    BREAK           reduce using rule 59 (arith -> atom .)
    RETURN          reduce using rule 59 (arith -> atom .)
    PASS            reduce using rule 59 (arith -> atom .)
    MACRO           reduce using rule 59 (arith -> atom .)
    IF              reduce using rule 59 (arith -> atom .)
    WHILE           reduce using rule 59 (arith -> atom .)
    NOT             reduce using rule 59 (arith -> atom .)
    MIN             reduce using rule 59 (arith -> atom .)
    MAX             reduce using rule 59 (arith -> atom .)
    VARIABLE        reduce using rule 59 (arith -> atom .)
    (               reduce using rule 59 (arith -> atom .)
    NUMBER          reduce using rule 59 (arith -> atom .)
    BOOLEAN         reduce using rule 59 (arith -> atom .)
    STRING          reduce using rule 59 (arith -> atom .)
    WORD            reduce using rule 59 (arith -> atom .)
    FUNCTION        reduce using rule 59 (arith -> atom .)
    {               reduce using rule 59 (arith -> atom .)
    $end            reduce using rule 59 (arith -> atom .)
    }               reduce using rule 59 (arith -> atom .)
    )               reduce using rule 59 (arith -> atom .)
    ,               reduce using rule 59 (arith -> atom .)
    ]               reduce using rule 59 (arith -> atom .)
    #               reduce using rule 59 (arith -> atom .)

  ! -               [ reduce using rule 59 (arith -> atom .) ]
  ! %               [ reduce using rule 59 (arith -> atom .) ]
  ! +               [ reduce using rule 59 (arith -> atom .) ]
  ! *               [ reduce using rule 59 (arith -> atom .) ]
  ! /               [ reduce using rule 59 (arith -> atom .) ]
  ! &               [ reduce using rule 59 (arith -> atom .) ]
  ! |               [ reduce using rule 59 (arith -> atom .) ]
  ! ^               [ reduce using rule 59 (arith -> atom .) ]
  ! POW             [ reduce using rule 59 (arith -> atom .) ]


state 18

    (60) atom -> - . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 55
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 19

    (75) table -> % . [ comma_expressions ]
    (76) table -> % . { table_contents }

    [               shift and go to state 56
    {               shift and go to state 57


state 20

    (64) arith -> MIN . ( comma_expressions )

    (               shift and go to state 58


state 21

    (65) arith -> MAX . ( comma_expressions )

    (               shift and go to state 59


state 22

    (4) atom -> VARIABLE . = expression
    (5) atom -> VARIABLE .

    =               shift and go to state 60
    +               reduce using rule 5 (atom -> VARIABLE .)
    -               reduce using rule 5 (atom -> VARIABLE .)
    *               reduce using rule 5 (atom -> VARIABLE .)
    /               reduce using rule 5 (atom -> VARIABLE .)
    %               reduce using rule 5 (atom -> VARIABLE .)
    &               reduce using rule 5 (atom -> VARIABLE .)
    |               reduce using rule 5 (atom -> VARIABLE .)
    ^               reduce using rule 5 (atom -> VARIABLE .)
    POW             reduce using rule 5 (atom -> VARIABLE .)
    LT              reduce using rule 5 (atom -> VARIABLE .)
    LE              reduce using rule 5 (atom -> VARIABLE .)
    GT              reduce using rule 5 (atom -> VARIABLE .)
    GE              reduce using rule 5 (atom -> VARIABLE .)
    EE              reduce using rule 5 (atom -> VARIABLE .)
    NE              reduce using rule 5 (atom -> VARIABLE .)
    AND             reduce using rule 5 (atom -> VARIABLE .)
    OR              reduce using rule 5 (atom -> VARIABLE .)
    BREAK           reduce using rule 5 (atom -> VARIABLE .)
    RETURN          reduce using rule 5 (atom -> VARIABLE .)
    PASS            reduce using rule 5 (atom -> VARIABLE .)
    MACRO           reduce using rule 5 (atom -> VARIABLE .)
    IF              reduce using rule 5 (atom -> VARIABLE .)
    WHILE           reduce using rule 5 (atom -> VARIABLE .)
    NOT             reduce using rule 5 (atom -> VARIABLE .)
    MIN             reduce using rule 5 (atom -> VARIABLE .)
    MAX             reduce using rule 5 (atom -> VARIABLE .)
    VARIABLE        reduce using rule 5 (atom -> VARIABLE .)
    (               reduce using rule 5 (atom -> VARIABLE .)
    NUMBER          reduce using rule 5 (atom -> VARIABLE .)
    BOOLEAN         reduce using rule 5 (atom -> VARIABLE .)
    STRING          reduce using rule 5 (atom -> VARIABLE .)
    WORD            reduce using rule 5 (atom -> VARIABLE .)
    FUNCTION        reduce using rule 5 (atom -> VARIABLE .)
    {               reduce using rule 5 (atom -> VARIABLE .)
    $end            reduce using rule 5 (atom -> VARIABLE .)
    }               reduce using rule 5 (atom -> VARIABLE .)
    )               reduce using rule 5 (atom -> VARIABLE .)
    ,               reduce using rule 5 (atom -> VARIABLE .)
    ]               reduce using rule 5 (atom -> VARIABLE .)
    #               reduce using rule 5 (atom -> VARIABLE .)


state 23

    (39) atom -> function_call .

    +               reduce using rule 39 (atom -> function_call .)
    -               reduce using rule 39 (atom -> function_call .)
    *               reduce using rule 39 (atom -> function_call .)
    /               reduce using rule 39 (atom -> function_call .)
    %               reduce using rule 39 (atom -> function_call .)
    &               reduce using rule 39 (atom -> function_call .)
    |               reduce using rule 39 (atom -> function_call .)
    ^               reduce using rule 39 (atom -> function_call .)
    POW             reduce using rule 39 (atom -> function_call .)
    LT              reduce using rule 39 (atom -> function_call .)
    LE              reduce using rule 39 (atom -> function_call .)
    GT              reduce using rule 39 (atom -> function_call .)
    GE              reduce using rule 39 (atom -> function_call .)
    EE              reduce using rule 39 (atom -> function_call .)
    NE              reduce using rule 39 (atom -> function_call .)
    AND             reduce using rule 39 (atom -> function_call .)
    OR              reduce using rule 39 (atom -> function_call .)
    BREAK           reduce using rule 39 (atom -> function_call .)
    RETURN          reduce using rule 39 (atom -> function_call .)
    PASS            reduce using rule 39 (atom -> function_call .)
    MACRO           reduce using rule 39 (atom -> function_call .)
    IF              reduce using rule 39 (atom -> function_call .)
    WHILE           reduce using rule 39 (atom -> function_call .)
    NOT             reduce using rule 39 (atom -> function_call .)
    MIN             reduce using rule 39 (atom -> function_call .)
    MAX             reduce using rule 39 (atom -> function_call .)
    VARIABLE        reduce using rule 39 (atom -> function_call .)
    (               reduce using rule 39 (atom -> function_call .)
    NUMBER          reduce using rule 39 (atom -> function_call .)
    BOOLEAN         reduce using rule 39 (atom -> function_call .)
    STRING          reduce using rule 39 (atom -> function_call .)
    WORD            reduce using rule 39 (atom -> function_call .)
    FUNCTION        reduce using rule 39 (atom -> function_call .)
    {               reduce using rule 39 (atom -> function_call .)
    $end            reduce using rule 39 (atom -> function_call .)
    }               reduce using rule 39 (atom -> function_call .)
    )               reduce using rule 39 (atom -> function_call .)
    ,               reduce using rule 39 (atom -> function_call .)
    ]               reduce using rule 39 (atom -> function_call .)
    #               reduce using rule 39 (atom -> function_call .)


state 24

    (77) atom -> NUMBER .

    +               reduce using rule 77 (atom -> NUMBER .)
    -               reduce using rule 77 (atom -> NUMBER .)
    *               reduce using rule 77 (atom -> NUMBER .)
    /               reduce using rule 77 (atom -> NUMBER .)
    %               reduce using rule 77 (atom -> NUMBER .)
    &               reduce using rule 77 (atom -> NUMBER .)
    |               reduce using rule 77 (atom -> NUMBER .)
    ^               reduce using rule 77 (atom -> NUMBER .)
    POW             reduce using rule 77 (atom -> NUMBER .)
    LT              reduce using rule 77 (atom -> NUMBER .)
    LE              reduce using rule 77 (atom -> NUMBER .)
    GT              reduce using rule 77 (atom -> NUMBER .)
    GE              reduce using rule 77 (atom -> NUMBER .)
    EE              reduce using rule 77 (atom -> NUMBER .)
    NE              reduce using rule 77 (atom -> NUMBER .)
    AND             reduce using rule 77 (atom -> NUMBER .)
    OR              reduce using rule 77 (atom -> NUMBER .)
    BREAK           reduce using rule 77 (atom -> NUMBER .)
    RETURN          reduce using rule 77 (atom -> NUMBER .)
    PASS            reduce using rule 77 (atom -> NUMBER .)
    MACRO           reduce using rule 77 (atom -> NUMBER .)
    IF              reduce using rule 77 (atom -> NUMBER .)
    WHILE           reduce using rule 77 (atom -> NUMBER .)
    NOT             reduce using rule 77 (atom -> NUMBER .)
    MIN             reduce using rule 77 (atom -> NUMBER .)
    MAX             reduce using rule 77 (atom -> NUMBER .)
    VARIABLE        reduce using rule 77 (atom -> NUMBER .)
    (               reduce using rule 77 (atom -> NUMBER .)
    NUMBER          reduce using rule 77 (atom -> NUMBER .)
    BOOLEAN         reduce using rule 77 (atom -> NUMBER .)
    STRING          reduce using rule 77 (atom -> NUMBER .)
    WORD            reduce using rule 77 (atom -> NUMBER .)
    FUNCTION        reduce using rule 77 (atom -> NUMBER .)
    {               reduce using rule 77 (atom -> NUMBER .)
    $end            reduce using rule 77 (atom -> NUMBER .)
    }               reduce using rule 77 (atom -> NUMBER .)
    )               reduce using rule 77 (atom -> NUMBER .)
    ,               reduce using rule 77 (atom -> NUMBER .)
    ]               reduce using rule 77 (atom -> NUMBER .)
    #               reduce using rule 77 (atom -> NUMBER .)


state 25

    (78) atom -> BOOLEAN .

    +               reduce using rule 78 (atom -> BOOLEAN .)
    -               reduce using rule 78 (atom -> BOOLEAN .)
    *               reduce using rule 78 (atom -> BOOLEAN .)
    /               reduce using rule 78 (atom -> BOOLEAN .)
    %               reduce using rule 78 (atom -> BOOLEAN .)
    &               reduce using rule 78 (atom -> BOOLEAN .)
    |               reduce using rule 78 (atom -> BOOLEAN .)
    ^               reduce using rule 78 (atom -> BOOLEAN .)
    POW             reduce using rule 78 (atom -> BOOLEAN .)
    LT              reduce using rule 78 (atom -> BOOLEAN .)
    LE              reduce using rule 78 (atom -> BOOLEAN .)
    GT              reduce using rule 78 (atom -> BOOLEAN .)
    GE              reduce using rule 78 (atom -> BOOLEAN .)
    EE              reduce using rule 78 (atom -> BOOLEAN .)
    NE              reduce using rule 78 (atom -> BOOLEAN .)
    AND             reduce using rule 78 (atom -> BOOLEAN .)
    OR              reduce using rule 78 (atom -> BOOLEAN .)
    BREAK           reduce using rule 78 (atom -> BOOLEAN .)
    RETURN          reduce using rule 78 (atom -> BOOLEAN .)
    PASS            reduce using rule 78 (atom -> BOOLEAN .)
    MACRO           reduce using rule 78 (atom -> BOOLEAN .)
    IF              reduce using rule 78 (atom -> BOOLEAN .)
    WHILE           reduce using rule 78 (atom -> BOOLEAN .)
    NOT             reduce using rule 78 (atom -> BOOLEAN .)
    MIN             reduce using rule 78 (atom -> BOOLEAN .)
    MAX             reduce using rule 78 (atom -> BOOLEAN .)
    VARIABLE        reduce using rule 78 (atom -> BOOLEAN .)
    (               reduce using rule 78 (atom -> BOOLEAN .)
    NUMBER          reduce using rule 78 (atom -> BOOLEAN .)
    BOOLEAN         reduce using rule 78 (atom -> BOOLEAN .)
    STRING          reduce using rule 78 (atom -> BOOLEAN .)
    WORD            reduce using rule 78 (atom -> BOOLEAN .)
    FUNCTION        reduce using rule 78 (atom -> BOOLEAN .)
    {               reduce using rule 78 (atom -> BOOLEAN .)
    $end            reduce using rule 78 (atom -> BOOLEAN .)
    }               reduce using rule 78 (atom -> BOOLEAN .)
    )               reduce using rule 78 (atom -> BOOLEAN .)
    ,               reduce using rule 78 (atom -> BOOLEAN .)
    ]               reduce using rule 78 (atom -> BOOLEAN .)
    #               reduce using rule 78 (atom -> BOOLEAN .)


state 26

    (79) atom -> STRING .

    +               reduce using rule 79 (atom -> STRING .)
    -               reduce using rule 79 (atom -> STRING .)
    *               reduce using rule 79 (atom -> STRING .)
    /               reduce using rule 79 (atom -> STRING .)
    %               reduce using rule 79 (atom -> STRING .)
    &               reduce using rule 79 (atom -> STRING .)
    |               reduce using rule 79 (atom -> STRING .)
    ^               reduce using rule 79 (atom -> STRING .)
    POW             reduce using rule 79 (atom -> STRING .)
    LT              reduce using rule 79 (atom -> STRING .)
    LE              reduce using rule 79 (atom -> STRING .)
    GT              reduce using rule 79 (atom -> STRING .)
    GE              reduce using rule 79 (atom -> STRING .)
    EE              reduce using rule 79 (atom -> STRING .)
    NE              reduce using rule 79 (atom -> STRING .)
    AND             reduce using rule 79 (atom -> STRING .)
    OR              reduce using rule 79 (atom -> STRING .)
    BREAK           reduce using rule 79 (atom -> STRING .)
    RETURN          reduce using rule 79 (atom -> STRING .)
    PASS            reduce using rule 79 (atom -> STRING .)
    MACRO           reduce using rule 79 (atom -> STRING .)
    IF              reduce using rule 79 (atom -> STRING .)
    WHILE           reduce using rule 79 (atom -> STRING .)
    NOT             reduce using rule 79 (atom -> STRING .)
    MIN             reduce using rule 79 (atom -> STRING .)
    MAX             reduce using rule 79 (atom -> STRING .)
    VARIABLE        reduce using rule 79 (atom -> STRING .)
    (               reduce using rule 79 (atom -> STRING .)
    NUMBER          reduce using rule 79 (atom -> STRING .)
    BOOLEAN         reduce using rule 79 (atom -> STRING .)
    STRING          reduce using rule 79 (atom -> STRING .)
    WORD            reduce using rule 79 (atom -> STRING .)
    FUNCTION        reduce using rule 79 (atom -> STRING .)
    {               reduce using rule 79 (atom -> STRING .)
    $end            reduce using rule 79 (atom -> STRING .)
    }               reduce using rule 79 (atom -> STRING .)
    )               reduce using rule 79 (atom -> STRING .)
    ,               reduce using rule 79 (atom -> STRING .)
    ]               reduce using rule 79 (atom -> STRING .)
    #               reduce using rule 79 (atom -> STRING .)


state 27

    (80) atom -> table .

    +               reduce using rule 80 (atom -> table .)
    -               reduce using rule 80 (atom -> table .)
    *               reduce using rule 80 (atom -> table .)
    /               reduce using rule 80 (atom -> table .)
    %               reduce using rule 80 (atom -> table .)
    &               reduce using rule 80 (atom -> table .)
    |               reduce using rule 80 (atom -> table .)
    ^               reduce using rule 80 (atom -> table .)
    POW             reduce using rule 80 (atom -> table .)
    LT              reduce using rule 80 (atom -> table .)
    LE              reduce using rule 80 (atom -> table .)
    GT              reduce using rule 80 (atom -> table .)
    GE              reduce using rule 80 (atom -> table .)
    EE              reduce using rule 80 (atom -> table .)
    NE              reduce using rule 80 (atom -> table .)
    AND             reduce using rule 80 (atom -> table .)
    OR              reduce using rule 80 (atom -> table .)
    BREAK           reduce using rule 80 (atom -> table .)
    RETURN          reduce using rule 80 (atom -> table .)
    PASS            reduce using rule 80 (atom -> table .)
    MACRO           reduce using rule 80 (atom -> table .)
    IF              reduce using rule 80 (atom -> table .)
    WHILE           reduce using rule 80 (atom -> table .)
    NOT             reduce using rule 80 (atom -> table .)
    MIN             reduce using rule 80 (atom -> table .)
    MAX             reduce using rule 80 (atom -> table .)
    VARIABLE        reduce using rule 80 (atom -> table .)
    (               reduce using rule 80 (atom -> table .)
    NUMBER          reduce using rule 80 (atom -> table .)
    BOOLEAN         reduce using rule 80 (atom -> table .)
    STRING          reduce using rule 80 (atom -> table .)
    WORD            reduce using rule 80 (atom -> table .)
    FUNCTION        reduce using rule 80 (atom -> table .)
    {               reduce using rule 80 (atom -> table .)
    $end            reduce using rule 80 (atom -> table .)
    }               reduce using rule 80 (atom -> table .)
    )               reduce using rule 80 (atom -> table .)
    ,               reduce using rule 80 (atom -> table .)
    ]               reduce using rule 80 (atom -> table .)
    #               reduce using rule 80 (atom -> table .)


state 28

    (81) atom -> WORD .

    +               reduce using rule 81 (atom -> WORD .)
    -               reduce using rule 81 (atom -> WORD .)
    *               reduce using rule 81 (atom -> WORD .)
    /               reduce using rule 81 (atom -> WORD .)
    %               reduce using rule 81 (atom -> WORD .)
    &               reduce using rule 81 (atom -> WORD .)
    |               reduce using rule 81 (atom -> WORD .)
    ^               reduce using rule 81 (atom -> WORD .)
    POW             reduce using rule 81 (atom -> WORD .)
    LT              reduce using rule 81 (atom -> WORD .)
    LE              reduce using rule 81 (atom -> WORD .)
    GT              reduce using rule 81 (atom -> WORD .)
    GE              reduce using rule 81 (atom -> WORD .)
    EE              reduce using rule 81 (atom -> WORD .)
    NE              reduce using rule 81 (atom -> WORD .)
    AND             reduce using rule 81 (atom -> WORD .)
    OR              reduce using rule 81 (atom -> WORD .)
    BREAK           reduce using rule 81 (atom -> WORD .)
    RETURN          reduce using rule 81 (atom -> WORD .)
    PASS            reduce using rule 81 (atom -> WORD .)
    MACRO           reduce using rule 81 (atom -> WORD .)
    IF              reduce using rule 81 (atom -> WORD .)
    WHILE           reduce using rule 81 (atom -> WORD .)
    NOT             reduce using rule 81 (atom -> WORD .)
    MIN             reduce using rule 81 (atom -> WORD .)
    MAX             reduce using rule 81 (atom -> WORD .)
    VARIABLE        reduce using rule 81 (atom -> WORD .)
    (               reduce using rule 81 (atom -> WORD .)
    NUMBER          reduce using rule 81 (atom -> WORD .)
    BOOLEAN         reduce using rule 81 (atom -> WORD .)
    STRING          reduce using rule 81 (atom -> WORD .)
    WORD            reduce using rule 81 (atom -> WORD .)
    FUNCTION        reduce using rule 81 (atom -> WORD .)
    {               reduce using rule 81 (atom -> WORD .)
    $end            reduce using rule 81 (atom -> WORD .)
    }               reduce using rule 81 (atom -> WORD .)
    )               reduce using rule 81 (atom -> WORD .)
    ,               reduce using rule 81 (atom -> WORD .)
    ]               reduce using rule 81 (atom -> WORD .)
    #               reduce using rule 81 (atom -> WORD .)


state 29

    (14) function_call -> FUNCTION . parameters scope
    (15) function_call -> FUNCTION . parameters tag_list
    (16) function_call -> FUNCTION . parameters
    (17) function_call -> FUNCTION .
    (26) parameters -> . ( param_element )
    (27) parameters -> . ( )

  ! shift/reduce conflict for ( resolved as shift
    +               reduce using rule 17 (function_call -> FUNCTION .)
    -               reduce using rule 17 (function_call -> FUNCTION .)
    *               reduce using rule 17 (function_call -> FUNCTION .)
    /               reduce using rule 17 (function_call -> FUNCTION .)
    %               reduce using rule 17 (function_call -> FUNCTION .)
    &               reduce using rule 17 (function_call -> FUNCTION .)
    |               reduce using rule 17 (function_call -> FUNCTION .)
    ^               reduce using rule 17 (function_call -> FUNCTION .)
    POW             reduce using rule 17 (function_call -> FUNCTION .)
    LT              reduce using rule 17 (function_call -> FUNCTION .)
    LE              reduce using rule 17 (function_call -> FUNCTION .)
    GT              reduce using rule 17 (function_call -> FUNCTION .)
    GE              reduce using rule 17 (function_call -> FUNCTION .)
    EE              reduce using rule 17 (function_call -> FUNCTION .)
    NE              reduce using rule 17 (function_call -> FUNCTION .)
    AND             reduce using rule 17 (function_call -> FUNCTION .)
    OR              reduce using rule 17 (function_call -> FUNCTION .)
    BREAK           reduce using rule 17 (function_call -> FUNCTION .)
    RETURN          reduce using rule 17 (function_call -> FUNCTION .)
    PASS            reduce using rule 17 (function_call -> FUNCTION .)
    MACRO           reduce using rule 17 (function_call -> FUNCTION .)
    IF              reduce using rule 17 (function_call -> FUNCTION .)
    WHILE           reduce using rule 17 (function_call -> FUNCTION .)
    NOT             reduce using rule 17 (function_call -> FUNCTION .)
    MIN             reduce using rule 17 (function_call -> FUNCTION .)
    MAX             reduce using rule 17 (function_call -> FUNCTION .)
    VARIABLE        reduce using rule 17 (function_call -> FUNCTION .)
    NUMBER          reduce using rule 17 (function_call -> FUNCTION .)
    BOOLEAN         reduce using rule 17 (function_call -> FUNCTION .)
    STRING          reduce using rule 17 (function_call -> FUNCTION .)
    WORD            reduce using rule 17 (function_call -> FUNCTION .)
    FUNCTION        reduce using rule 17 (function_call -> FUNCTION .)
    {               reduce using rule 17 (function_call -> FUNCTION .)
    $end            reduce using rule 17 (function_call -> FUNCTION .)
    }               reduce using rule 17 (function_call -> FUNCTION .)
    )               reduce using rule 17 (function_call -> FUNCTION .)
    ,               reduce using rule 17 (function_call -> FUNCTION .)
    ]               reduce using rule 17 (function_call -> FUNCTION .)
    #               reduce using rule 17 (function_call -> FUNCTION .)
    (               shift and go to state 62

  ! (               [ reduce using rule 17 (function_call -> FUNCTION .) ]

    parameters                     shift and go to state 61

state 30

    (21) scope -> { . expressions }
    (22) scope -> { . }
    (23) expressions -> . statement expressions
    (24) expressions -> . statement
    (25) expressions -> .
    (35) statement -> . BREAK
    (36) statement -> . expression
    (37) statement -> . if_condition
    (38) statement -> . while_loop
    (67) statement -> . RETURN expression
    (68) statement -> . RETURN
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (10) if_condition -> . IF ( expression ) scope elif_branch
    (11) if_condition -> . IF ( expression ) scope else_branch
    (12) if_condition -> . IF ( expression ) scope
    (13) while_loop -> . WHILE ( expression ) scope
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 64
    BREAK           shift and go to state 3
    RETURN          shift and go to state 7
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    IF              shift and go to state 11
    WHILE           shift and go to state 14
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

  ! }               [ reduce using rule 25 (expressions -> .) ]

    expressions                    shift and go to state 63
    statement                      shift and go to state 2
    expression                     shift and go to state 4
    if_condition                   shift and go to state 5
    while_loop                     shift and go to state 6
    comp                           shift and go to state 10
    scope                          shift and go to state 13
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 31

    (23) expressions -> statement expressions .

    $end            reduce using rule 23 (expressions -> statement expressions .)
    }               reduce using rule 23 (expressions -> statement expressions .)


state 32

    (67) statement -> RETURN expression .

    BREAK           reduce using rule 67 (statement -> RETURN expression .)
    RETURN          reduce using rule 67 (statement -> RETURN expression .)
    PASS            reduce using rule 67 (statement -> RETURN expression .)
    MACRO           reduce using rule 67 (statement -> RETURN expression .)
    IF              reduce using rule 67 (statement -> RETURN expression .)
    WHILE           reduce using rule 67 (statement -> RETURN expression .)
    NOT             reduce using rule 67 (statement -> RETURN expression .)
    MIN             reduce using rule 67 (statement -> RETURN expression .)
    MAX             reduce using rule 67 (statement -> RETURN expression .)
    VARIABLE        reduce using rule 67 (statement -> RETURN expression .)
    -               reduce using rule 67 (statement -> RETURN expression .)
    (               reduce using rule 67 (statement -> RETURN expression .)
    NUMBER          reduce using rule 67 (statement -> RETURN expression .)
    BOOLEAN         reduce using rule 67 (statement -> RETURN expression .)
    STRING          reduce using rule 67 (statement -> RETURN expression .)
    WORD            reduce using rule 67 (statement -> RETURN expression .)
    FUNCTION        reduce using rule 67 (statement -> RETURN expression .)
    %               reduce using rule 67 (statement -> RETURN expression .)
    {               reduce using rule 67 (statement -> RETURN expression .)
    $end            reduce using rule 67 (statement -> RETURN expression .)
    }               reduce using rule 67 (statement -> RETURN expression .)


state 33

    (2) expression -> MACRO = . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 65
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 34

    (47) comp -> comp AND . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comp                           shift and go to state 66
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 35

    (48) comp -> comp OR . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comp                           shift and go to state 67
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 36

    (10) if_condition -> IF ( . expression ) scope elif_branch
    (11) if_condition -> IF ( . expression ) scope else_branch
    (12) if_condition -> IF ( . expression ) scope
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 68
    scope                          shift and go to state 13
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 37

    (66) atom -> ( expression . )

    )               shift and go to state 69


state 38

    (13) while_loop -> WHILE ( . expression ) scope
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 70
    scope                          shift and go to state 13
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 39

    (40) comp -> NOT comp .
    (47) comp -> comp . AND comp
    (48) comp -> comp . OR comp

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    BREAK           reduce using rule 40 (comp -> NOT comp .)
    RETURN          reduce using rule 40 (comp -> NOT comp .)
    PASS            reduce using rule 40 (comp -> NOT comp .)
    MACRO           reduce using rule 40 (comp -> NOT comp .)
    IF              reduce using rule 40 (comp -> NOT comp .)
    WHILE           reduce using rule 40 (comp -> NOT comp .)
    NOT             reduce using rule 40 (comp -> NOT comp .)
    MIN             reduce using rule 40 (comp -> NOT comp .)
    MAX             reduce using rule 40 (comp -> NOT comp .)
    VARIABLE        reduce using rule 40 (comp -> NOT comp .)
    -               reduce using rule 40 (comp -> NOT comp .)
    (               reduce using rule 40 (comp -> NOT comp .)
    NUMBER          reduce using rule 40 (comp -> NOT comp .)
    BOOLEAN         reduce using rule 40 (comp -> NOT comp .)
    STRING          reduce using rule 40 (comp -> NOT comp .)
    WORD            reduce using rule 40 (comp -> NOT comp .)
    FUNCTION        reduce using rule 40 (comp -> NOT comp .)
    %               reduce using rule 40 (comp -> NOT comp .)
    {               reduce using rule 40 (comp -> NOT comp .)
    $end            reduce using rule 40 (comp -> NOT comp .)
    }               reduce using rule 40 (comp -> NOT comp .)
    )               reduce using rule 40 (comp -> NOT comp .)
    ,               reduce using rule 40 (comp -> NOT comp .)
    ]               reduce using rule 40 (comp -> NOT comp .)
    +               reduce using rule 40 (comp -> NOT comp .)
    *               reduce using rule 40 (comp -> NOT comp .)
    /               reduce using rule 40 (comp -> NOT comp .)
    &               reduce using rule 40 (comp -> NOT comp .)
    |               reduce using rule 40 (comp -> NOT comp .)
    ^               reduce using rule 40 (comp -> NOT comp .)
    POW             reduce using rule 40 (comp -> NOT comp .)
    LT              reduce using rule 40 (comp -> NOT comp .)
    LE              reduce using rule 40 (comp -> NOT comp .)
    GT              reduce using rule 40 (comp -> NOT comp .)
    GE              reduce using rule 40 (comp -> NOT comp .)
    EE              reduce using rule 40 (comp -> NOT comp .)
    NE              reduce using rule 40 (comp -> NOT comp .)
    #               reduce using rule 40 (comp -> NOT comp .)
    AND             shift and go to state 34
    OR              shift and go to state 35

  ! AND             [ reduce using rule 40 (comp -> NOT comp .) ]
  ! OR              [ reduce using rule 40 (comp -> NOT comp .) ]


state 40

    (41) comp -> arith LT . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 71
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 41

    (42) comp -> arith LE . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 72
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 42

    (43) comp -> arith GT . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 73
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 43

    (44) comp -> arith GE . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 74
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 44

    (45) comp -> arith EE . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 75
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 45

    (46) comp -> arith NE . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    arith                          shift and go to state 76
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 46

    (50) arith -> atom + . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 77
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 47

    (51) arith -> atom - . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 78
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 48

    (52) arith -> atom * . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 79
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 49

    (53) arith -> atom / . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 80
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 50

    (54) arith -> atom % . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 81
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 51

    (55) arith -> atom & . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 82
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 52

    (56) arith -> atom | . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 83
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 53

    (57) arith -> atom ^ . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 84
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 54

    (58) arith -> atom POW . atom
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    atom                           shift and go to state 85
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 55

    (60) atom -> - atom .

    +               reduce using rule 60 (atom -> - atom .)
    -               reduce using rule 60 (atom -> - atom .)
    *               reduce using rule 60 (atom -> - atom .)
    /               reduce using rule 60 (atom -> - atom .)
    %               reduce using rule 60 (atom -> - atom .)
    &               reduce using rule 60 (atom -> - atom .)
    |               reduce using rule 60 (atom -> - atom .)
    ^               reduce using rule 60 (atom -> - atom .)
    POW             reduce using rule 60 (atom -> - atom .)
    LT              reduce using rule 60 (atom -> - atom .)
    LE              reduce using rule 60 (atom -> - atom .)
    GT              reduce using rule 60 (atom -> - atom .)
    GE              reduce using rule 60 (atom -> - atom .)
    EE              reduce using rule 60 (atom -> - atom .)
    NE              reduce using rule 60 (atom -> - atom .)
    AND             reduce using rule 60 (atom -> - atom .)
    OR              reduce using rule 60 (atom -> - atom .)
    BREAK           reduce using rule 60 (atom -> - atom .)
    RETURN          reduce using rule 60 (atom -> - atom .)
    PASS            reduce using rule 60 (atom -> - atom .)
    MACRO           reduce using rule 60 (atom -> - atom .)
    IF              reduce using rule 60 (atom -> - atom .)
    WHILE           reduce using rule 60 (atom -> - atom .)
    NOT             reduce using rule 60 (atom -> - atom .)
    MIN             reduce using rule 60 (atom -> - atom .)
    MAX             reduce using rule 60 (atom -> - atom .)
    VARIABLE        reduce using rule 60 (atom -> - atom .)
    (               reduce using rule 60 (atom -> - atom .)
    NUMBER          reduce using rule 60 (atom -> - atom .)
    BOOLEAN         reduce using rule 60 (atom -> - atom .)
    STRING          reduce using rule 60 (atom -> - atom .)
    WORD            reduce using rule 60 (atom -> - atom .)
    FUNCTION        reduce using rule 60 (atom -> - atom .)
    {               reduce using rule 60 (atom -> - atom .)
    $end            reduce using rule 60 (atom -> - atom .)
    }               reduce using rule 60 (atom -> - atom .)
    )               reduce using rule 60 (atom -> - atom .)
    ,               reduce using rule 60 (atom -> - atom .)
    ]               reduce using rule 60 (atom -> - atom .)
    #               reduce using rule 60 (atom -> - atom .)


state 56

    (75) table -> % [ . comma_expressions ]
    (61) comma_expressions -> . expression , comma_expressions
    (62) comma_expressions -> . expression ,
    (63) comma_expressions -> . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comma_expressions              shift and go to state 86
    expression                     shift and go to state 87
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 57

    (76) table -> % { . table_contents }
    (69) table_contents -> . STRING : expression , table_contents
    (70) table_contents -> . NUMBER : expression , table_contents
    (71) table_contents -> . STRING : expression ,
    (72) table_contents -> . NUMBER : expression ,
    (73) table_contents -> . STRING : expression
    (74) table_contents -> . NUMBER : expression

    STRING          shift and go to state 89
    NUMBER          shift and go to state 90

    table_contents                 shift and go to state 88

state 58

    (64) arith -> MIN ( . comma_expressions )
    (61) comma_expressions -> . expression , comma_expressions
    (62) comma_expressions -> . expression ,
    (63) comma_expressions -> . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comma_expressions              shift and go to state 91
    expression                     shift and go to state 87
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 59

    (65) arith -> MAX ( . comma_expressions )
    (61) comma_expressions -> . expression , comma_expressions
    (62) comma_expressions -> . expression ,
    (63) comma_expressions -> . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    comma_expressions              shift and go to state 92
    expression                     shift and go to state 87
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 60

    (4) atom -> VARIABLE = . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 93
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 61

    (14) function_call -> FUNCTION parameters . scope
    (15) function_call -> FUNCTION parameters . tag_list
    (16) function_call -> FUNCTION parameters .
    (21) scope -> . { expressions }
    (22) scope -> . { }
    (19) tag_list -> . tag # scope tag_list
    (20) tag_list -> . tag # scope
    (18) tag -> . TAG expression

  ! shift/reduce conflict for { resolved as shift
    +               reduce using rule 16 (function_call -> FUNCTION parameters .)
    -               reduce using rule 16 (function_call -> FUNCTION parameters .)
    *               reduce using rule 16 (function_call -> FUNCTION parameters .)
    /               reduce using rule 16 (function_call -> FUNCTION parameters .)
    %               reduce using rule 16 (function_call -> FUNCTION parameters .)
    &               reduce using rule 16 (function_call -> FUNCTION parameters .)
    |               reduce using rule 16 (function_call -> FUNCTION parameters .)
    ^               reduce using rule 16 (function_call -> FUNCTION parameters .)
    POW             reduce using rule 16 (function_call -> FUNCTION parameters .)
    LT              reduce using rule 16 (function_call -> FUNCTION parameters .)
    LE              reduce using rule 16 (function_call -> FUNCTION parameters .)
    GT              reduce using rule 16 (function_call -> FUNCTION parameters .)
    GE              reduce using rule 16 (function_call -> FUNCTION parameters .)
    EE              reduce using rule 16 (function_call -> FUNCTION parameters .)
    NE              reduce using rule 16 (function_call -> FUNCTION parameters .)
    AND             reduce using rule 16 (function_call -> FUNCTION parameters .)
    OR              reduce using rule 16 (function_call -> FUNCTION parameters .)
    BREAK           reduce using rule 16 (function_call -> FUNCTION parameters .)
    RETURN          reduce using rule 16 (function_call -> FUNCTION parameters .)
    PASS            reduce using rule 16 (function_call -> FUNCTION parameters .)
    MACRO           reduce using rule 16 (function_call -> FUNCTION parameters .)
    IF              reduce using rule 16 (function_call -> FUNCTION parameters .)
    WHILE           reduce using rule 16 (function_call -> FUNCTION parameters .)
    NOT             reduce using rule 16 (function_call -> FUNCTION parameters .)
    MIN             reduce using rule 16 (function_call -> FUNCTION parameters .)
    MAX             reduce using rule 16 (function_call -> FUNCTION parameters .)
    VARIABLE        reduce using rule 16 (function_call -> FUNCTION parameters .)
    (               reduce using rule 16 (function_call -> FUNCTION parameters .)
    NUMBER          reduce using rule 16 (function_call -> FUNCTION parameters .)
    BOOLEAN         reduce using rule 16 (function_call -> FUNCTION parameters .)
    STRING          reduce using rule 16 (function_call -> FUNCTION parameters .)
    WORD            reduce using rule 16 (function_call -> FUNCTION parameters .)
    FUNCTION        reduce using rule 16 (function_call -> FUNCTION parameters .)
    $end            reduce using rule 16 (function_call -> FUNCTION parameters .)
    }               reduce using rule 16 (function_call -> FUNCTION parameters .)
    )               reduce using rule 16 (function_call -> FUNCTION parameters .)
    ,               reduce using rule 16 (function_call -> FUNCTION parameters .)
    ]               reduce using rule 16 (function_call -> FUNCTION parameters .)
    #               reduce using rule 16 (function_call -> FUNCTION parameters .)
    {               shift and go to state 30
    TAG             shift and go to state 97

  ! {               [ reduce using rule 16 (function_call -> FUNCTION parameters .) ]

    scope                          shift and go to state 94
    tag_list                       shift and go to state 95
    tag                            shift and go to state 96

state 62

    (26) parameters -> ( . param_element )
    (27) parameters -> ( . )
    (31) param_element -> . expression , param_element
    (32) param_element -> . expression , param_element_pos
    (33) param_element -> . expression ,
    (34) param_element -> . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    )               shift and go to state 99
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    param_element                  shift and go to state 98
    expression                     shift and go to state 100
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 63

    (21) scope -> { expressions . }

    }               shift and go to state 101


state 64

    (22) scope -> { } .

    +               reduce using rule 22 (scope -> { } .)
    -               reduce using rule 22 (scope -> { } .)
    *               reduce using rule 22 (scope -> { } .)
    /               reduce using rule 22 (scope -> { } .)
    %               reduce using rule 22 (scope -> { } .)
    &               reduce using rule 22 (scope -> { } .)
    |               reduce using rule 22 (scope -> { } .)
    ^               reduce using rule 22 (scope -> { } .)
    POW             reduce using rule 22 (scope -> { } .)
    LT              reduce using rule 22 (scope -> { } .)
    LE              reduce using rule 22 (scope -> { } .)
    GT              reduce using rule 22 (scope -> { } .)
    GE              reduce using rule 22 (scope -> { } .)
    EE              reduce using rule 22 (scope -> { } .)
    NE              reduce using rule 22 (scope -> { } .)
    AND             reduce using rule 22 (scope -> { } .)
    OR              reduce using rule 22 (scope -> { } .)
    BREAK           reduce using rule 22 (scope -> { } .)
    RETURN          reduce using rule 22 (scope -> { } .)
    PASS            reduce using rule 22 (scope -> { } .)
    MACRO           reduce using rule 22 (scope -> { } .)
    IF              reduce using rule 22 (scope -> { } .)
    WHILE           reduce using rule 22 (scope -> { } .)
    NOT             reduce using rule 22 (scope -> { } .)
    MIN             reduce using rule 22 (scope -> { } .)
    MAX             reduce using rule 22 (scope -> { } .)
    VARIABLE        reduce using rule 22 (scope -> { } .)
    (               reduce using rule 22 (scope -> { } .)
    NUMBER          reduce using rule 22 (scope -> { } .)
    BOOLEAN         reduce using rule 22 (scope -> { } .)
    STRING          reduce using rule 22 (scope -> { } .)
    WORD            reduce using rule 22 (scope -> { } .)
    FUNCTION        reduce using rule 22 (scope -> { } .)
    {               reduce using rule 22 (scope -> { } .)
    $end            reduce using rule 22 (scope -> { } .)
    }               reduce using rule 22 (scope -> { } .)
    )               reduce using rule 22 (scope -> { } .)
    ,               reduce using rule 22 (scope -> { } .)
    ]               reduce using rule 22 (scope -> { } .)
    #               reduce using rule 22 (scope -> { } .)
    ELSEIF          reduce using rule 22 (scope -> { } .)
    ELSE            reduce using rule 22 (scope -> { } .)
    TAG             reduce using rule 22 (scope -> { } .)


state 65

    (2) expression -> MACRO = expression .

    BREAK           reduce using rule 2 (expression -> MACRO = expression .)
    RETURN          reduce using rule 2 (expression -> MACRO = expression .)
    PASS            reduce using rule 2 (expression -> MACRO = expression .)
    MACRO           reduce using rule 2 (expression -> MACRO = expression .)
    IF              reduce using rule 2 (expression -> MACRO = expression .)
    WHILE           reduce using rule 2 (expression -> MACRO = expression .)
    NOT             reduce using rule 2 (expression -> MACRO = expression .)
    MIN             reduce using rule 2 (expression -> MACRO = expression .)
    MAX             reduce using rule 2 (expression -> MACRO = expression .)
    VARIABLE        reduce using rule 2 (expression -> MACRO = expression .)
    -               reduce using rule 2 (expression -> MACRO = expression .)
    (               reduce using rule 2 (expression -> MACRO = expression .)
    NUMBER          reduce using rule 2 (expression -> MACRO = expression .)
    BOOLEAN         reduce using rule 2 (expression -> MACRO = expression .)
    STRING          reduce using rule 2 (expression -> MACRO = expression .)
    WORD            reduce using rule 2 (expression -> MACRO = expression .)
    FUNCTION        reduce using rule 2 (expression -> MACRO = expression .)
    %               reduce using rule 2 (expression -> MACRO = expression .)
    {               reduce using rule 2 (expression -> MACRO = expression .)
    $end            reduce using rule 2 (expression -> MACRO = expression .)
    }               reduce using rule 2 (expression -> MACRO = expression .)
    )               reduce using rule 2 (expression -> MACRO = expression .)
    AND             reduce using rule 2 (expression -> MACRO = expression .)
    OR              reduce using rule 2 (expression -> MACRO = expression .)
    ,               reduce using rule 2 (expression -> MACRO = expression .)
    ]               reduce using rule 2 (expression -> MACRO = expression .)
    +               reduce using rule 2 (expression -> MACRO = expression .)
    *               reduce using rule 2 (expression -> MACRO = expression .)
    /               reduce using rule 2 (expression -> MACRO = expression .)
    &               reduce using rule 2 (expression -> MACRO = expression .)
    |               reduce using rule 2 (expression -> MACRO = expression .)
    ^               reduce using rule 2 (expression -> MACRO = expression .)
    POW             reduce using rule 2 (expression -> MACRO = expression .)
    LT              reduce using rule 2 (expression -> MACRO = expression .)
    LE              reduce using rule 2 (expression -> MACRO = expression .)
    GT              reduce using rule 2 (expression -> MACRO = expression .)
    GE              reduce using rule 2 (expression -> MACRO = expression .)
    EE              reduce using rule 2 (expression -> MACRO = expression .)
    NE              reduce using rule 2 (expression -> MACRO = expression .)
    #               reduce using rule 2 (expression -> MACRO = expression .)


state 66

    (47) comp -> comp AND comp .
    (47) comp -> comp . AND comp
    (48) comp -> comp . OR comp

    AND             reduce using rule 47 (comp -> comp AND comp .)
    OR              reduce using rule 47 (comp -> comp AND comp .)
    BREAK           reduce using rule 47 (comp -> comp AND comp .)
    RETURN          reduce using rule 47 (comp -> comp AND comp .)
    PASS            reduce using rule 47 (comp -> comp AND comp .)
    MACRO           reduce using rule 47 (comp -> comp AND comp .)
    IF              reduce using rule 47 (comp -> comp AND comp .)
    WHILE           reduce using rule 47 (comp -> comp AND comp .)
    NOT             reduce using rule 47 (comp -> comp AND comp .)
    MIN             reduce using rule 47 (comp -> comp AND comp .)
    MAX             reduce using rule 47 (comp -> comp AND comp .)
    VARIABLE        reduce using rule 47 (comp -> comp AND comp .)
    -               reduce using rule 47 (comp -> comp AND comp .)
    (               reduce using rule 47 (comp -> comp AND comp .)
    NUMBER          reduce using rule 47 (comp -> comp AND comp .)
    BOOLEAN         reduce using rule 47 (comp -> comp AND comp .)
    STRING          reduce using rule 47 (comp -> comp AND comp .)
    WORD            reduce using rule 47 (comp -> comp AND comp .)
    FUNCTION        reduce using rule 47 (comp -> comp AND comp .)
    %               reduce using rule 47 (comp -> comp AND comp .)
    {               reduce using rule 47 (comp -> comp AND comp .)
    $end            reduce using rule 47 (comp -> comp AND comp .)
    }               reduce using rule 47 (comp -> comp AND comp .)
    )               reduce using rule 47 (comp -> comp AND comp .)
    ,               reduce using rule 47 (comp -> comp AND comp .)
    ]               reduce using rule 47 (comp -> comp AND comp .)
    +               reduce using rule 47 (comp -> comp AND comp .)
    *               reduce using rule 47 (comp -> comp AND comp .)
    /               reduce using rule 47 (comp -> comp AND comp .)
    &               reduce using rule 47 (comp -> comp AND comp .)
    |               reduce using rule 47 (comp -> comp AND comp .)
    ^               reduce using rule 47 (comp -> comp AND comp .)
    POW             reduce using rule 47 (comp -> comp AND comp .)
    LT              reduce using rule 47 (comp -> comp AND comp .)
    LE              reduce using rule 47 (comp -> comp AND comp .)
    GT              reduce using rule 47 (comp -> comp AND comp .)
    GE              reduce using rule 47 (comp -> comp AND comp .)
    EE              reduce using rule 47 (comp -> comp AND comp .)
    NE              reduce using rule 47 (comp -> comp AND comp .)
    #               reduce using rule 47 (comp -> comp AND comp .)

  ! AND             [ shift and go to state 34 ]
  ! OR              [ shift and go to state 35 ]


state 67

    (48) comp -> comp OR comp .
    (47) comp -> comp . AND comp
    (48) comp -> comp . OR comp

    AND             reduce using rule 48 (comp -> comp OR comp .)
    OR              reduce using rule 48 (comp -> comp OR comp .)
    BREAK           reduce using rule 48 (comp -> comp OR comp .)
    RETURN          reduce using rule 48 (comp -> comp OR comp .)
    PASS            reduce using rule 48 (comp -> comp OR comp .)
    MACRO           reduce using rule 48 (comp -> comp OR comp .)
    IF              reduce using rule 48 (comp -> comp OR comp .)
    WHILE           reduce using rule 48 (comp -> comp OR comp .)
    NOT             reduce using rule 48 (comp -> comp OR comp .)
    MIN             reduce using rule 48 (comp -> comp OR comp .)
    MAX             reduce using rule 48 (comp -> comp OR comp .)
    VARIABLE        reduce using rule 48 (comp -> comp OR comp .)
    -               reduce using rule 48 (comp -> comp OR comp .)
    (               reduce using rule 48 (comp -> comp OR comp .)
    NUMBER          reduce using rule 48 (comp -> comp OR comp .)
    BOOLEAN         reduce using rule 48 (comp -> comp OR comp .)
    STRING          reduce using rule 48 (comp -> comp OR comp .)
    WORD            reduce using rule 48 (comp -> comp OR comp .)
    FUNCTION        reduce using rule 48 (comp -> comp OR comp .)
    %               reduce using rule 48 (comp -> comp OR comp .)
    {               reduce using rule 48 (comp -> comp OR comp .)
    $end            reduce using rule 48 (comp -> comp OR comp .)
    }               reduce using rule 48 (comp -> comp OR comp .)
    )               reduce using rule 48 (comp -> comp OR comp .)
    ,               reduce using rule 48 (comp -> comp OR comp .)
    ]               reduce using rule 48 (comp -> comp OR comp .)
    +               reduce using rule 48 (comp -> comp OR comp .)
    *               reduce using rule 48 (comp -> comp OR comp .)
    /               reduce using rule 48 (comp -> comp OR comp .)
    &               reduce using rule 48 (comp -> comp OR comp .)
    |               reduce using rule 48 (comp -> comp OR comp .)
    ^               reduce using rule 48 (comp -> comp OR comp .)
    POW             reduce using rule 48 (comp -> comp OR comp .)
    LT              reduce using rule 48 (comp -> comp OR comp .)
    LE              reduce using rule 48 (comp -> comp OR comp .)
    GT              reduce using rule 48 (comp -> comp OR comp .)
    GE              reduce using rule 48 (comp -> comp OR comp .)
    EE              reduce using rule 48 (comp -> comp OR comp .)
    NE              reduce using rule 48 (comp -> comp OR comp .)
    #               reduce using rule 48 (comp -> comp OR comp .)

  ! AND             [ shift and go to state 34 ]
  ! OR              [ shift and go to state 35 ]


state 68

    (10) if_condition -> IF ( expression . ) scope elif_branch
    (11) if_condition -> IF ( expression . ) scope else_branch
    (12) if_condition -> IF ( expression . ) scope

    )               shift and go to state 102


state 69

    (66) atom -> ( expression ) .

    +               reduce using rule 66 (atom -> ( expression ) .)
    -               reduce using rule 66 (atom -> ( expression ) .)
    *               reduce using rule 66 (atom -> ( expression ) .)
    /               reduce using rule 66 (atom -> ( expression ) .)
    %               reduce using rule 66 (atom -> ( expression ) .)
    &               reduce using rule 66 (atom -> ( expression ) .)
    |               reduce using rule 66 (atom -> ( expression ) .)
    ^               reduce using rule 66 (atom -> ( expression ) .)
    POW             reduce using rule 66 (atom -> ( expression ) .)
    LT              reduce using rule 66 (atom -> ( expression ) .)
    LE              reduce using rule 66 (atom -> ( expression ) .)
    GT              reduce using rule 66 (atom -> ( expression ) .)
    GE              reduce using rule 66 (atom -> ( expression ) .)
    EE              reduce using rule 66 (atom -> ( expression ) .)
    NE              reduce using rule 66 (atom -> ( expression ) .)
    AND             reduce using rule 66 (atom -> ( expression ) .)
    OR              reduce using rule 66 (atom -> ( expression ) .)
    BREAK           reduce using rule 66 (atom -> ( expression ) .)
    RETURN          reduce using rule 66 (atom -> ( expression ) .)
    PASS            reduce using rule 66 (atom -> ( expression ) .)
    MACRO           reduce using rule 66 (atom -> ( expression ) .)
    IF              reduce using rule 66 (atom -> ( expression ) .)
    WHILE           reduce using rule 66 (atom -> ( expression ) .)
    NOT             reduce using rule 66 (atom -> ( expression ) .)
    MIN             reduce using rule 66 (atom -> ( expression ) .)
    MAX             reduce using rule 66 (atom -> ( expression ) .)
    VARIABLE        reduce using rule 66 (atom -> ( expression ) .)
    (               reduce using rule 66 (atom -> ( expression ) .)
    NUMBER          reduce using rule 66 (atom -> ( expression ) .)
    BOOLEAN         reduce using rule 66 (atom -> ( expression ) .)
    STRING          reduce using rule 66 (atom -> ( expression ) .)
    WORD            reduce using rule 66 (atom -> ( expression ) .)
    FUNCTION        reduce using rule 66 (atom -> ( expression ) .)
    {               reduce using rule 66 (atom -> ( expression ) .)
    $end            reduce using rule 66 (atom -> ( expression ) .)
    }               reduce using rule 66 (atom -> ( expression ) .)
    )               reduce using rule 66 (atom -> ( expression ) .)
    ,               reduce using rule 66 (atom -> ( expression ) .)
    ]               reduce using rule 66 (atom -> ( expression ) .)
    #               reduce using rule 66 (atom -> ( expression ) .)


state 70

    (13) while_loop -> WHILE ( expression . ) scope

    )               shift and go to state 103


state 71

    (41) comp -> arith LT arith .

    AND             reduce using rule 41 (comp -> arith LT arith .)
    OR              reduce using rule 41 (comp -> arith LT arith .)
    BREAK           reduce using rule 41 (comp -> arith LT arith .)
    RETURN          reduce using rule 41 (comp -> arith LT arith .)
    PASS            reduce using rule 41 (comp -> arith LT arith .)
    MACRO           reduce using rule 41 (comp -> arith LT arith .)
    IF              reduce using rule 41 (comp -> arith LT arith .)
    WHILE           reduce using rule 41 (comp -> arith LT arith .)
    NOT             reduce using rule 41 (comp -> arith LT arith .)
    MIN             reduce using rule 41 (comp -> arith LT arith .)
    MAX             reduce using rule 41 (comp -> arith LT arith .)
    VARIABLE        reduce using rule 41 (comp -> arith LT arith .)
    -               reduce using rule 41 (comp -> arith LT arith .)
    (               reduce using rule 41 (comp -> arith LT arith .)
    NUMBER          reduce using rule 41 (comp -> arith LT arith .)
    BOOLEAN         reduce using rule 41 (comp -> arith LT arith .)
    STRING          reduce using rule 41 (comp -> arith LT arith .)
    WORD            reduce using rule 41 (comp -> arith LT arith .)
    FUNCTION        reduce using rule 41 (comp -> arith LT arith .)
    %               reduce using rule 41 (comp -> arith LT arith .)
    {               reduce using rule 41 (comp -> arith LT arith .)
    $end            reduce using rule 41 (comp -> arith LT arith .)
    }               reduce using rule 41 (comp -> arith LT arith .)
    )               reduce using rule 41 (comp -> arith LT arith .)
    ,               reduce using rule 41 (comp -> arith LT arith .)
    ]               reduce using rule 41 (comp -> arith LT arith .)
    +               reduce using rule 41 (comp -> arith LT arith .)
    *               reduce using rule 41 (comp -> arith LT arith .)
    /               reduce using rule 41 (comp -> arith LT arith .)
    &               reduce using rule 41 (comp -> arith LT arith .)
    |               reduce using rule 41 (comp -> arith LT arith .)
    ^               reduce using rule 41 (comp -> arith LT arith .)
    POW             reduce using rule 41 (comp -> arith LT arith .)
    LT              reduce using rule 41 (comp -> arith LT arith .)
    LE              reduce using rule 41 (comp -> arith LT arith .)
    GT              reduce using rule 41 (comp -> arith LT arith .)
    GE              reduce using rule 41 (comp -> arith LT arith .)
    EE              reduce using rule 41 (comp -> arith LT arith .)
    NE              reduce using rule 41 (comp -> arith LT arith .)
    #               reduce using rule 41 (comp -> arith LT arith .)


state 72

    (42) comp -> arith LE arith .

    AND             reduce using rule 42 (comp -> arith LE arith .)
    OR              reduce using rule 42 (comp -> arith LE arith .)
    BREAK           reduce using rule 42 (comp -> arith LE arith .)
    RETURN          reduce using rule 42 (comp -> arith LE arith .)
    PASS            reduce using rule 42 (comp -> arith LE arith .)
    MACRO           reduce using rule 42 (comp -> arith LE arith .)
    IF              reduce using rule 42 (comp -> arith LE arith .)
    WHILE           reduce using rule 42 (comp -> arith LE arith .)
    NOT             reduce using rule 42 (comp -> arith LE arith .)
    MIN             reduce using rule 42 (comp -> arith LE arith .)
    MAX             reduce using rule 42 (comp -> arith LE arith .)
    VARIABLE        reduce using rule 42 (comp -> arith LE arith .)
    -               reduce using rule 42 (comp -> arith LE arith .)
    (               reduce using rule 42 (comp -> arith LE arith .)
    NUMBER          reduce using rule 42 (comp -> arith LE arith .)
    BOOLEAN         reduce using rule 42 (comp -> arith LE arith .)
    STRING          reduce using rule 42 (comp -> arith LE arith .)
    WORD            reduce using rule 42 (comp -> arith LE arith .)
    FUNCTION        reduce using rule 42 (comp -> arith LE arith .)
    %               reduce using rule 42 (comp -> arith LE arith .)
    {               reduce using rule 42 (comp -> arith LE arith .)
    $end            reduce using rule 42 (comp -> arith LE arith .)
    }               reduce using rule 42 (comp -> arith LE arith .)
    )               reduce using rule 42 (comp -> arith LE arith .)
    ,               reduce using rule 42 (comp -> arith LE arith .)
    ]               reduce using rule 42 (comp -> arith LE arith .)
    +               reduce using rule 42 (comp -> arith LE arith .)
    *               reduce using rule 42 (comp -> arith LE arith .)
    /               reduce using rule 42 (comp -> arith LE arith .)
    &               reduce using rule 42 (comp -> arith LE arith .)
    |               reduce using rule 42 (comp -> arith LE arith .)
    ^               reduce using rule 42 (comp -> arith LE arith .)
    POW             reduce using rule 42 (comp -> arith LE arith .)
    LT              reduce using rule 42 (comp -> arith LE arith .)
    LE              reduce using rule 42 (comp -> arith LE arith .)
    GT              reduce using rule 42 (comp -> arith LE arith .)
    GE              reduce using rule 42 (comp -> arith LE arith .)
    EE              reduce using rule 42 (comp -> arith LE arith .)
    NE              reduce using rule 42 (comp -> arith LE arith .)
    #               reduce using rule 42 (comp -> arith LE arith .)


state 73

    (43) comp -> arith GT arith .

    AND             reduce using rule 43 (comp -> arith GT arith .)
    OR              reduce using rule 43 (comp -> arith GT arith .)
    BREAK           reduce using rule 43 (comp -> arith GT arith .)
    RETURN          reduce using rule 43 (comp -> arith GT arith .)
    PASS            reduce using rule 43 (comp -> arith GT arith .)
    MACRO           reduce using rule 43 (comp -> arith GT arith .)
    IF              reduce using rule 43 (comp -> arith GT arith .)
    WHILE           reduce using rule 43 (comp -> arith GT arith .)
    NOT             reduce using rule 43 (comp -> arith GT arith .)
    MIN             reduce using rule 43 (comp -> arith GT arith .)
    MAX             reduce using rule 43 (comp -> arith GT arith .)
    VARIABLE        reduce using rule 43 (comp -> arith GT arith .)
    -               reduce using rule 43 (comp -> arith GT arith .)
    (               reduce using rule 43 (comp -> arith GT arith .)
    NUMBER          reduce using rule 43 (comp -> arith GT arith .)
    BOOLEAN         reduce using rule 43 (comp -> arith GT arith .)
    STRING          reduce using rule 43 (comp -> arith GT arith .)
    WORD            reduce using rule 43 (comp -> arith GT arith .)
    FUNCTION        reduce using rule 43 (comp -> arith GT arith .)
    %               reduce using rule 43 (comp -> arith GT arith .)
    {               reduce using rule 43 (comp -> arith GT arith .)
    $end            reduce using rule 43 (comp -> arith GT arith .)
    }               reduce using rule 43 (comp -> arith GT arith .)
    )               reduce using rule 43 (comp -> arith GT arith .)
    ,               reduce using rule 43 (comp -> arith GT arith .)
    ]               reduce using rule 43 (comp -> arith GT arith .)
    +               reduce using rule 43 (comp -> arith GT arith .)
    *               reduce using rule 43 (comp -> arith GT arith .)
    /               reduce using rule 43 (comp -> arith GT arith .)
    &               reduce using rule 43 (comp -> arith GT arith .)
    |               reduce using rule 43 (comp -> arith GT arith .)
    ^               reduce using rule 43 (comp -> arith GT arith .)
    POW             reduce using rule 43 (comp -> arith GT arith .)
    LT              reduce using rule 43 (comp -> arith GT arith .)
    LE              reduce using rule 43 (comp -> arith GT arith .)
    GT              reduce using rule 43 (comp -> arith GT arith .)
    GE              reduce using rule 43 (comp -> arith GT arith .)
    EE              reduce using rule 43 (comp -> arith GT arith .)
    NE              reduce using rule 43 (comp -> arith GT arith .)
    #               reduce using rule 43 (comp -> arith GT arith .)


state 74

    (44) comp -> arith GE arith .

    AND             reduce using rule 44 (comp -> arith GE arith .)
    OR              reduce using rule 44 (comp -> arith GE arith .)
    BREAK           reduce using rule 44 (comp -> arith GE arith .)
    RETURN          reduce using rule 44 (comp -> arith GE arith .)
    PASS            reduce using rule 44 (comp -> arith GE arith .)
    MACRO           reduce using rule 44 (comp -> arith GE arith .)
    IF              reduce using rule 44 (comp -> arith GE arith .)
    WHILE           reduce using rule 44 (comp -> arith GE arith .)
    NOT             reduce using rule 44 (comp -> arith GE arith .)
    MIN             reduce using rule 44 (comp -> arith GE arith .)
    MAX             reduce using rule 44 (comp -> arith GE arith .)
    VARIABLE        reduce using rule 44 (comp -> arith GE arith .)
    -               reduce using rule 44 (comp -> arith GE arith .)
    (               reduce using rule 44 (comp -> arith GE arith .)
    NUMBER          reduce using rule 44 (comp -> arith GE arith .)
    BOOLEAN         reduce using rule 44 (comp -> arith GE arith .)
    STRING          reduce using rule 44 (comp -> arith GE arith .)
    WORD            reduce using rule 44 (comp -> arith GE arith .)
    FUNCTION        reduce using rule 44 (comp -> arith GE arith .)
    %               reduce using rule 44 (comp -> arith GE arith .)
    {               reduce using rule 44 (comp -> arith GE arith .)
    $end            reduce using rule 44 (comp -> arith GE arith .)
    }               reduce using rule 44 (comp -> arith GE arith .)
    )               reduce using rule 44 (comp -> arith GE arith .)
    ,               reduce using rule 44 (comp -> arith GE arith .)
    ]               reduce using rule 44 (comp -> arith GE arith .)
    +               reduce using rule 44 (comp -> arith GE arith .)
    *               reduce using rule 44 (comp -> arith GE arith .)
    /               reduce using rule 44 (comp -> arith GE arith .)
    &               reduce using rule 44 (comp -> arith GE arith .)
    |               reduce using rule 44 (comp -> arith GE arith .)
    ^               reduce using rule 44 (comp -> arith GE arith .)
    POW             reduce using rule 44 (comp -> arith GE arith .)
    LT              reduce using rule 44 (comp -> arith GE arith .)
    LE              reduce using rule 44 (comp -> arith GE arith .)
    GT              reduce using rule 44 (comp -> arith GE arith .)
    GE              reduce using rule 44 (comp -> arith GE arith .)
    EE              reduce using rule 44 (comp -> arith GE arith .)
    NE              reduce using rule 44 (comp -> arith GE arith .)
    #               reduce using rule 44 (comp -> arith GE arith .)


state 75

    (45) comp -> arith EE arith .

    AND             reduce using rule 45 (comp -> arith EE arith .)
    OR              reduce using rule 45 (comp -> arith EE arith .)
    BREAK           reduce using rule 45 (comp -> arith EE arith .)
    RETURN          reduce using rule 45 (comp -> arith EE arith .)
    PASS            reduce using rule 45 (comp -> arith EE arith .)
    MACRO           reduce using rule 45 (comp -> arith EE arith .)
    IF              reduce using rule 45 (comp -> arith EE arith .)
    WHILE           reduce using rule 45 (comp -> arith EE arith .)
    NOT             reduce using rule 45 (comp -> arith EE arith .)
    MIN             reduce using rule 45 (comp -> arith EE arith .)
    MAX             reduce using rule 45 (comp -> arith EE arith .)
    VARIABLE        reduce using rule 45 (comp -> arith EE arith .)
    -               reduce using rule 45 (comp -> arith EE arith .)
    (               reduce using rule 45 (comp -> arith EE arith .)
    NUMBER          reduce using rule 45 (comp -> arith EE arith .)
    BOOLEAN         reduce using rule 45 (comp -> arith EE arith .)
    STRING          reduce using rule 45 (comp -> arith EE arith .)
    WORD            reduce using rule 45 (comp -> arith EE arith .)
    FUNCTION        reduce using rule 45 (comp -> arith EE arith .)
    %               reduce using rule 45 (comp -> arith EE arith .)
    {               reduce using rule 45 (comp -> arith EE arith .)
    $end            reduce using rule 45 (comp -> arith EE arith .)
    }               reduce using rule 45 (comp -> arith EE arith .)
    )               reduce using rule 45 (comp -> arith EE arith .)
    ,               reduce using rule 45 (comp -> arith EE arith .)
    ]               reduce using rule 45 (comp -> arith EE arith .)
    +               reduce using rule 45 (comp -> arith EE arith .)
    *               reduce using rule 45 (comp -> arith EE arith .)
    /               reduce using rule 45 (comp -> arith EE arith .)
    &               reduce using rule 45 (comp -> arith EE arith .)
    |               reduce using rule 45 (comp -> arith EE arith .)
    ^               reduce using rule 45 (comp -> arith EE arith .)
    POW             reduce using rule 45 (comp -> arith EE arith .)
    LT              reduce using rule 45 (comp -> arith EE arith .)
    LE              reduce using rule 45 (comp -> arith EE arith .)
    GT              reduce using rule 45 (comp -> arith EE arith .)
    GE              reduce using rule 45 (comp -> arith EE arith .)
    EE              reduce using rule 45 (comp -> arith EE arith .)
    NE              reduce using rule 45 (comp -> arith EE arith .)
    #               reduce using rule 45 (comp -> arith EE arith .)


state 76

    (46) comp -> arith NE arith .

    AND             reduce using rule 46 (comp -> arith NE arith .)
    OR              reduce using rule 46 (comp -> arith NE arith .)
    BREAK           reduce using rule 46 (comp -> arith NE arith .)
    RETURN          reduce using rule 46 (comp -> arith NE arith .)
    PASS            reduce using rule 46 (comp -> arith NE arith .)
    MACRO           reduce using rule 46 (comp -> arith NE arith .)
    IF              reduce using rule 46 (comp -> arith NE arith .)
    WHILE           reduce using rule 46 (comp -> arith NE arith .)
    NOT             reduce using rule 46 (comp -> arith NE arith .)
    MIN             reduce using rule 46 (comp -> arith NE arith .)
    MAX             reduce using rule 46 (comp -> arith NE arith .)
    VARIABLE        reduce using rule 46 (comp -> arith NE arith .)
    -               reduce using rule 46 (comp -> arith NE arith .)
    (               reduce using rule 46 (comp -> arith NE arith .)
    NUMBER          reduce using rule 46 (comp -> arith NE arith .)
    BOOLEAN         reduce using rule 46 (comp -> arith NE arith .)
    STRING          reduce using rule 46 (comp -> arith NE arith .)
    WORD            reduce using rule 46 (comp -> arith NE arith .)
    FUNCTION        reduce using rule 46 (comp -> arith NE arith .)
    %               reduce using rule 46 (comp -> arith NE arith .)
    {               reduce using rule 46 (comp -> arith NE arith .)
    $end            reduce using rule 46 (comp -> arith NE arith .)
    }               reduce using rule 46 (comp -> arith NE arith .)
    )               reduce using rule 46 (comp -> arith NE arith .)
    ,               reduce using rule 46 (comp -> arith NE arith .)
    ]               reduce using rule 46 (comp -> arith NE arith .)
    +               reduce using rule 46 (comp -> arith NE arith .)
    *               reduce using rule 46 (comp -> arith NE arith .)
    /               reduce using rule 46 (comp -> arith NE arith .)
    &               reduce using rule 46 (comp -> arith NE arith .)
    |               reduce using rule 46 (comp -> arith NE arith .)
    ^               reduce using rule 46 (comp -> arith NE arith .)
    POW             reduce using rule 46 (comp -> arith NE arith .)
    LT              reduce using rule 46 (comp -> arith NE arith .)
    LE              reduce using rule 46 (comp -> arith NE arith .)
    GT              reduce using rule 46 (comp -> arith NE arith .)
    GE              reduce using rule 46 (comp -> arith NE arith .)
    EE              reduce using rule 46 (comp -> arith NE arith .)
    NE              reduce using rule 46 (comp -> arith NE arith .)
    #               reduce using rule 46 (comp -> arith NE arith .)


state 77

    (50) arith -> atom + atom .

    LT              reduce using rule 50 (arith -> atom + atom .)
    LE              reduce using rule 50 (arith -> atom + atom .)
    GT              reduce using rule 50 (arith -> atom + atom .)
    GE              reduce using rule 50 (arith -> atom + atom .)
    EE              reduce using rule 50 (arith -> atom + atom .)
    NE              reduce using rule 50 (arith -> atom + atom .)
    AND             reduce using rule 50 (arith -> atom + atom .)
    OR              reduce using rule 50 (arith -> atom + atom .)
    BREAK           reduce using rule 50 (arith -> atom + atom .)
    RETURN          reduce using rule 50 (arith -> atom + atom .)
    PASS            reduce using rule 50 (arith -> atom + atom .)
    MACRO           reduce using rule 50 (arith -> atom + atom .)
    IF              reduce using rule 50 (arith -> atom + atom .)
    WHILE           reduce using rule 50 (arith -> atom + atom .)
    NOT             reduce using rule 50 (arith -> atom + atom .)
    MIN             reduce using rule 50 (arith -> atom + atom .)
    MAX             reduce using rule 50 (arith -> atom + atom .)
    VARIABLE        reduce using rule 50 (arith -> atom + atom .)
    -               reduce using rule 50 (arith -> atom + atom .)
    (               reduce using rule 50 (arith -> atom + atom .)
    NUMBER          reduce using rule 50 (arith -> atom + atom .)
    BOOLEAN         reduce using rule 50 (arith -> atom + atom .)
    STRING          reduce using rule 50 (arith -> atom + atom .)
    WORD            reduce using rule 50 (arith -> atom + atom .)
    FUNCTION        reduce using rule 50 (arith -> atom + atom .)
    %               reduce using rule 50 (arith -> atom + atom .)
    {               reduce using rule 50 (arith -> atom + atom .)
    $end            reduce using rule 50 (arith -> atom + atom .)
    }               reduce using rule 50 (arith -> atom + atom .)
    )               reduce using rule 50 (arith -> atom + atom .)
    ,               reduce using rule 50 (arith -> atom + atom .)
    ]               reduce using rule 50 (arith -> atom + atom .)
    +               reduce using rule 50 (arith -> atom + atom .)
    *               reduce using rule 50 (arith -> atom + atom .)
    /               reduce using rule 50 (arith -> atom + atom .)
    &               reduce using rule 50 (arith -> atom + atom .)
    |               reduce using rule 50 (arith -> atom + atom .)
    ^               reduce using rule 50 (arith -> atom + atom .)
    POW             reduce using rule 50 (arith -> atom + atom .)
    #               reduce using rule 50 (arith -> atom + atom .)


state 78

    (51) arith -> atom - atom .

    LT              reduce using rule 51 (arith -> atom - atom .)
    LE              reduce using rule 51 (arith -> atom - atom .)
    GT              reduce using rule 51 (arith -> atom - atom .)
    GE              reduce using rule 51 (arith -> atom - atom .)
    EE              reduce using rule 51 (arith -> atom - atom .)
    NE              reduce using rule 51 (arith -> atom - atom .)
    AND             reduce using rule 51 (arith -> atom - atom .)
    OR              reduce using rule 51 (arith -> atom - atom .)
    BREAK           reduce using rule 51 (arith -> atom - atom .)
    RETURN          reduce using rule 51 (arith -> atom - atom .)
    PASS            reduce using rule 51 (arith -> atom - atom .)
    MACRO           reduce using rule 51 (arith -> atom - atom .)
    IF              reduce using rule 51 (arith -> atom - atom .)
    WHILE           reduce using rule 51 (arith -> atom - atom .)
    NOT             reduce using rule 51 (arith -> atom - atom .)
    MIN             reduce using rule 51 (arith -> atom - atom .)
    MAX             reduce using rule 51 (arith -> atom - atom .)
    VARIABLE        reduce using rule 51 (arith -> atom - atom .)
    -               reduce using rule 51 (arith -> atom - atom .)
    (               reduce using rule 51 (arith -> atom - atom .)
    NUMBER          reduce using rule 51 (arith -> atom - atom .)
    BOOLEAN         reduce using rule 51 (arith -> atom - atom .)
    STRING          reduce using rule 51 (arith -> atom - atom .)
    WORD            reduce using rule 51 (arith -> atom - atom .)
    FUNCTION        reduce using rule 51 (arith -> atom - atom .)
    %               reduce using rule 51 (arith -> atom - atom .)
    {               reduce using rule 51 (arith -> atom - atom .)
    $end            reduce using rule 51 (arith -> atom - atom .)
    }               reduce using rule 51 (arith -> atom - atom .)
    )               reduce using rule 51 (arith -> atom - atom .)
    ,               reduce using rule 51 (arith -> atom - atom .)
    ]               reduce using rule 51 (arith -> atom - atom .)
    +               reduce using rule 51 (arith -> atom - atom .)
    *               reduce using rule 51 (arith -> atom - atom .)
    /               reduce using rule 51 (arith -> atom - atom .)
    &               reduce using rule 51 (arith -> atom - atom .)
    |               reduce using rule 51 (arith -> atom - atom .)
    ^               reduce using rule 51 (arith -> atom - atom .)
    POW             reduce using rule 51 (arith -> atom - atom .)
    #               reduce using rule 51 (arith -> atom - atom .)


state 79

    (52) arith -> atom * atom .

    LT              reduce using rule 52 (arith -> atom * atom .)
    LE              reduce using rule 52 (arith -> atom * atom .)
    GT              reduce using rule 52 (arith -> atom * atom .)
    GE              reduce using rule 52 (arith -> atom * atom .)
    EE              reduce using rule 52 (arith -> atom * atom .)
    NE              reduce using rule 52 (arith -> atom * atom .)
    AND             reduce using rule 52 (arith -> atom * atom .)
    OR              reduce using rule 52 (arith -> atom * atom .)
    BREAK           reduce using rule 52 (arith -> atom * atom .)
    RETURN          reduce using rule 52 (arith -> atom * atom .)
    PASS            reduce using rule 52 (arith -> atom * atom .)
    MACRO           reduce using rule 52 (arith -> atom * atom .)
    IF              reduce using rule 52 (arith -> atom * atom .)
    WHILE           reduce using rule 52 (arith -> atom * atom .)
    NOT             reduce using rule 52 (arith -> atom * atom .)
    MIN             reduce using rule 52 (arith -> atom * atom .)
    MAX             reduce using rule 52 (arith -> atom * atom .)
    VARIABLE        reduce using rule 52 (arith -> atom * atom .)
    -               reduce using rule 52 (arith -> atom * atom .)
    (               reduce using rule 52 (arith -> atom * atom .)
    NUMBER          reduce using rule 52 (arith -> atom * atom .)
    BOOLEAN         reduce using rule 52 (arith -> atom * atom .)
    STRING          reduce using rule 52 (arith -> atom * atom .)
    WORD            reduce using rule 52 (arith -> atom * atom .)
    FUNCTION        reduce using rule 52 (arith -> atom * atom .)
    %               reduce using rule 52 (arith -> atom * atom .)
    {               reduce using rule 52 (arith -> atom * atom .)
    $end            reduce using rule 52 (arith -> atom * atom .)
    }               reduce using rule 52 (arith -> atom * atom .)
    )               reduce using rule 52 (arith -> atom * atom .)
    ,               reduce using rule 52 (arith -> atom * atom .)
    ]               reduce using rule 52 (arith -> atom * atom .)
    +               reduce using rule 52 (arith -> atom * atom .)
    *               reduce using rule 52 (arith -> atom * atom .)
    /               reduce using rule 52 (arith -> atom * atom .)
    &               reduce using rule 52 (arith -> atom * atom .)
    |               reduce using rule 52 (arith -> atom * atom .)
    ^               reduce using rule 52 (arith -> atom * atom .)
    POW             reduce using rule 52 (arith -> atom * atom .)
    #               reduce using rule 52 (arith -> atom * atom .)


state 80

    (53) arith -> atom / atom .

    LT              reduce using rule 53 (arith -> atom / atom .)
    LE              reduce using rule 53 (arith -> atom / atom .)
    GT              reduce using rule 53 (arith -> atom / atom .)
    GE              reduce using rule 53 (arith -> atom / atom .)
    EE              reduce using rule 53 (arith -> atom / atom .)
    NE              reduce using rule 53 (arith -> atom / atom .)
    AND             reduce using rule 53 (arith -> atom / atom .)
    OR              reduce using rule 53 (arith -> atom / atom .)
    BREAK           reduce using rule 53 (arith -> atom / atom .)
    RETURN          reduce using rule 53 (arith -> atom / atom .)
    PASS            reduce using rule 53 (arith -> atom / atom .)
    MACRO           reduce using rule 53 (arith -> atom / atom .)
    IF              reduce using rule 53 (arith -> atom / atom .)
    WHILE           reduce using rule 53 (arith -> atom / atom .)
    NOT             reduce using rule 53 (arith -> atom / atom .)
    MIN             reduce using rule 53 (arith -> atom / atom .)
    MAX             reduce using rule 53 (arith -> atom / atom .)
    VARIABLE        reduce using rule 53 (arith -> atom / atom .)
    -               reduce using rule 53 (arith -> atom / atom .)
    (               reduce using rule 53 (arith -> atom / atom .)
    NUMBER          reduce using rule 53 (arith -> atom / atom .)
    BOOLEAN         reduce using rule 53 (arith -> atom / atom .)
    STRING          reduce using rule 53 (arith -> atom / atom .)
    WORD            reduce using rule 53 (arith -> atom / atom .)
    FUNCTION        reduce using rule 53 (arith -> atom / atom .)
    %               reduce using rule 53 (arith -> atom / atom .)
    {               reduce using rule 53 (arith -> atom / atom .)
    $end            reduce using rule 53 (arith -> atom / atom .)
    }               reduce using rule 53 (arith -> atom / atom .)
    )               reduce using rule 53 (arith -> atom / atom .)
    ,               reduce using rule 53 (arith -> atom / atom .)
    ]               reduce using rule 53 (arith -> atom / atom .)
    +               reduce using rule 53 (arith -> atom / atom .)
    *               reduce using rule 53 (arith -> atom / atom .)
    /               reduce using rule 53 (arith -> atom / atom .)
    &               reduce using rule 53 (arith -> atom / atom .)
    |               reduce using rule 53 (arith -> atom / atom .)
    ^               reduce using rule 53 (arith -> atom / atom .)
    POW             reduce using rule 53 (arith -> atom / atom .)
    #               reduce using rule 53 (arith -> atom / atom .)


state 81

    (54) arith -> atom % atom .

    LT              reduce using rule 54 (arith -> atom % atom .)
    LE              reduce using rule 54 (arith -> atom % atom .)
    GT              reduce using rule 54 (arith -> atom % atom .)
    GE              reduce using rule 54 (arith -> atom % atom .)
    EE              reduce using rule 54 (arith -> atom % atom .)
    NE              reduce using rule 54 (arith -> atom % atom .)
    AND             reduce using rule 54 (arith -> atom % atom .)
    OR              reduce using rule 54 (arith -> atom % atom .)
    BREAK           reduce using rule 54 (arith -> atom % atom .)
    RETURN          reduce using rule 54 (arith -> atom % atom .)
    PASS            reduce using rule 54 (arith -> atom % atom .)
    MACRO           reduce using rule 54 (arith -> atom % atom .)
    IF              reduce using rule 54 (arith -> atom % atom .)
    WHILE           reduce using rule 54 (arith -> atom % atom .)
    NOT             reduce using rule 54 (arith -> atom % atom .)
    MIN             reduce using rule 54 (arith -> atom % atom .)
    MAX             reduce using rule 54 (arith -> atom % atom .)
    VARIABLE        reduce using rule 54 (arith -> atom % atom .)
    -               reduce using rule 54 (arith -> atom % atom .)
    (               reduce using rule 54 (arith -> atom % atom .)
    NUMBER          reduce using rule 54 (arith -> atom % atom .)
    BOOLEAN         reduce using rule 54 (arith -> atom % atom .)
    STRING          reduce using rule 54 (arith -> atom % atom .)
    WORD            reduce using rule 54 (arith -> atom % atom .)
    FUNCTION        reduce using rule 54 (arith -> atom % atom .)
    %               reduce using rule 54 (arith -> atom % atom .)
    {               reduce using rule 54 (arith -> atom % atom .)
    $end            reduce using rule 54 (arith -> atom % atom .)
    }               reduce using rule 54 (arith -> atom % atom .)
    )               reduce using rule 54 (arith -> atom % atom .)
    ,               reduce using rule 54 (arith -> atom % atom .)
    ]               reduce using rule 54 (arith -> atom % atom .)
    +               reduce using rule 54 (arith -> atom % atom .)
    *               reduce using rule 54 (arith -> atom % atom .)
    /               reduce using rule 54 (arith -> atom % atom .)
    &               reduce using rule 54 (arith -> atom % atom .)
    |               reduce using rule 54 (arith -> atom % atom .)
    ^               reduce using rule 54 (arith -> atom % atom .)
    POW             reduce using rule 54 (arith -> atom % atom .)
    #               reduce using rule 54 (arith -> atom % atom .)


state 82

    (55) arith -> atom & atom .

    LT              reduce using rule 55 (arith -> atom & atom .)
    LE              reduce using rule 55 (arith -> atom & atom .)
    GT              reduce using rule 55 (arith -> atom & atom .)
    GE              reduce using rule 55 (arith -> atom & atom .)
    EE              reduce using rule 55 (arith -> atom & atom .)
    NE              reduce using rule 55 (arith -> atom & atom .)
    AND             reduce using rule 55 (arith -> atom & atom .)
    OR              reduce using rule 55 (arith -> atom & atom .)
    BREAK           reduce using rule 55 (arith -> atom & atom .)
    RETURN          reduce using rule 55 (arith -> atom & atom .)
    PASS            reduce using rule 55 (arith -> atom & atom .)
    MACRO           reduce using rule 55 (arith -> atom & atom .)
    IF              reduce using rule 55 (arith -> atom & atom .)
    WHILE           reduce using rule 55 (arith -> atom & atom .)
    NOT             reduce using rule 55 (arith -> atom & atom .)
    MIN             reduce using rule 55 (arith -> atom & atom .)
    MAX             reduce using rule 55 (arith -> atom & atom .)
    VARIABLE        reduce using rule 55 (arith -> atom & atom .)
    -               reduce using rule 55 (arith -> atom & atom .)
    (               reduce using rule 55 (arith -> atom & atom .)
    NUMBER          reduce using rule 55 (arith -> atom & atom .)
    BOOLEAN         reduce using rule 55 (arith -> atom & atom .)
    STRING          reduce using rule 55 (arith -> atom & atom .)
    WORD            reduce using rule 55 (arith -> atom & atom .)
    FUNCTION        reduce using rule 55 (arith -> atom & atom .)
    %               reduce using rule 55 (arith -> atom & atom .)
    {               reduce using rule 55 (arith -> atom & atom .)
    $end            reduce using rule 55 (arith -> atom & atom .)
    }               reduce using rule 55 (arith -> atom & atom .)
    )               reduce using rule 55 (arith -> atom & atom .)
    ,               reduce using rule 55 (arith -> atom & atom .)
    ]               reduce using rule 55 (arith -> atom & atom .)
    +               reduce using rule 55 (arith -> atom & atom .)
    *               reduce using rule 55 (arith -> atom & atom .)
    /               reduce using rule 55 (arith -> atom & atom .)
    &               reduce using rule 55 (arith -> atom & atom .)
    |               reduce using rule 55 (arith -> atom & atom .)
    ^               reduce using rule 55 (arith -> atom & atom .)
    POW             reduce using rule 55 (arith -> atom & atom .)
    #               reduce using rule 55 (arith -> atom & atom .)


state 83

    (56) arith -> atom | atom .

    LT              reduce using rule 56 (arith -> atom | atom .)
    LE              reduce using rule 56 (arith -> atom | atom .)
    GT              reduce using rule 56 (arith -> atom | atom .)
    GE              reduce using rule 56 (arith -> atom | atom .)
    EE              reduce using rule 56 (arith -> atom | atom .)
    NE              reduce using rule 56 (arith -> atom | atom .)
    AND             reduce using rule 56 (arith -> atom | atom .)
    OR              reduce using rule 56 (arith -> atom | atom .)
    BREAK           reduce using rule 56 (arith -> atom | atom .)
    RETURN          reduce using rule 56 (arith -> atom | atom .)
    PASS            reduce using rule 56 (arith -> atom | atom .)
    MACRO           reduce using rule 56 (arith -> atom | atom .)
    IF              reduce using rule 56 (arith -> atom | atom .)
    WHILE           reduce using rule 56 (arith -> atom | atom .)
    NOT             reduce using rule 56 (arith -> atom | atom .)
    MIN             reduce using rule 56 (arith -> atom | atom .)
    MAX             reduce using rule 56 (arith -> atom | atom .)
    VARIABLE        reduce using rule 56 (arith -> atom | atom .)
    -               reduce using rule 56 (arith -> atom | atom .)
    (               reduce using rule 56 (arith -> atom | atom .)
    NUMBER          reduce using rule 56 (arith -> atom | atom .)
    BOOLEAN         reduce using rule 56 (arith -> atom | atom .)
    STRING          reduce using rule 56 (arith -> atom | atom .)
    WORD            reduce using rule 56 (arith -> atom | atom .)
    FUNCTION        reduce using rule 56 (arith -> atom | atom .)
    %               reduce using rule 56 (arith -> atom | atom .)
    {               reduce using rule 56 (arith -> atom | atom .)
    $end            reduce using rule 56 (arith -> atom | atom .)
    }               reduce using rule 56 (arith -> atom | atom .)
    )               reduce using rule 56 (arith -> atom | atom .)
    ,               reduce using rule 56 (arith -> atom | atom .)
    ]               reduce using rule 56 (arith -> atom | atom .)
    +               reduce using rule 56 (arith -> atom | atom .)
    *               reduce using rule 56 (arith -> atom | atom .)
    /               reduce using rule 56 (arith -> atom | atom .)
    &               reduce using rule 56 (arith -> atom | atom .)
    |               reduce using rule 56 (arith -> atom | atom .)
    ^               reduce using rule 56 (arith -> atom | atom .)
    POW             reduce using rule 56 (arith -> atom | atom .)
    #               reduce using rule 56 (arith -> atom | atom .)


state 84

    (57) arith -> atom ^ atom .

    LT              reduce using rule 57 (arith -> atom ^ atom .)
    LE              reduce using rule 57 (arith -> atom ^ atom .)
    GT              reduce using rule 57 (arith -> atom ^ atom .)
    GE              reduce using rule 57 (arith -> atom ^ atom .)
    EE              reduce using rule 57 (arith -> atom ^ atom .)
    NE              reduce using rule 57 (arith -> atom ^ atom .)
    AND             reduce using rule 57 (arith -> atom ^ atom .)
    OR              reduce using rule 57 (arith -> atom ^ atom .)
    BREAK           reduce using rule 57 (arith -> atom ^ atom .)
    RETURN          reduce using rule 57 (arith -> atom ^ atom .)
    PASS            reduce using rule 57 (arith -> atom ^ atom .)
    MACRO           reduce using rule 57 (arith -> atom ^ atom .)
    IF              reduce using rule 57 (arith -> atom ^ atom .)
    WHILE           reduce using rule 57 (arith -> atom ^ atom .)
    NOT             reduce using rule 57 (arith -> atom ^ atom .)
    MIN             reduce using rule 57 (arith -> atom ^ atom .)
    MAX             reduce using rule 57 (arith -> atom ^ atom .)
    VARIABLE        reduce using rule 57 (arith -> atom ^ atom .)
    -               reduce using rule 57 (arith -> atom ^ atom .)
    (               reduce using rule 57 (arith -> atom ^ atom .)
    NUMBER          reduce using rule 57 (arith -> atom ^ atom .)
    BOOLEAN         reduce using rule 57 (arith -> atom ^ atom .)
    STRING          reduce using rule 57 (arith -> atom ^ atom .)
    WORD            reduce using rule 57 (arith -> atom ^ atom .)
    FUNCTION        reduce using rule 57 (arith -> atom ^ atom .)
    %               reduce using rule 57 (arith -> atom ^ atom .)
    {               reduce using rule 57 (arith -> atom ^ atom .)
    $end            reduce using rule 57 (arith -> atom ^ atom .)
    }               reduce using rule 57 (arith -> atom ^ atom .)
    )               reduce using rule 57 (arith -> atom ^ atom .)
    ,               reduce using rule 57 (arith -> atom ^ atom .)
    ]               reduce using rule 57 (arith -> atom ^ atom .)
    +               reduce using rule 57 (arith -> atom ^ atom .)
    *               reduce using rule 57 (arith -> atom ^ atom .)
    /               reduce using rule 57 (arith -> atom ^ atom .)
    &               reduce using rule 57 (arith -> atom ^ atom .)
    |               reduce using rule 57 (arith -> atom ^ atom .)
    ^               reduce using rule 57 (arith -> atom ^ atom .)
    POW             reduce using rule 57 (arith -> atom ^ atom .)
    #               reduce using rule 57 (arith -> atom ^ atom .)


state 85

    (58) arith -> atom POW atom .

    LT              reduce using rule 58 (arith -> atom POW atom .)
    LE              reduce using rule 58 (arith -> atom POW atom .)
    GT              reduce using rule 58 (arith -> atom POW atom .)
    GE              reduce using rule 58 (arith -> atom POW atom .)
    EE              reduce using rule 58 (arith -> atom POW atom .)
    NE              reduce using rule 58 (arith -> atom POW atom .)
    AND             reduce using rule 58 (arith -> atom POW atom .)
    OR              reduce using rule 58 (arith -> atom POW atom .)
    BREAK           reduce using rule 58 (arith -> atom POW atom .)
    RETURN          reduce using rule 58 (arith -> atom POW atom .)
    PASS            reduce using rule 58 (arith -> atom POW atom .)
    MACRO           reduce using rule 58 (arith -> atom POW atom .)
    IF              reduce using rule 58 (arith -> atom POW atom .)
    WHILE           reduce using rule 58 (arith -> atom POW atom .)
    NOT             reduce using rule 58 (arith -> atom POW atom .)
    MIN             reduce using rule 58 (arith -> atom POW atom .)
    MAX             reduce using rule 58 (arith -> atom POW atom .)
    VARIABLE        reduce using rule 58 (arith -> atom POW atom .)
    -               reduce using rule 58 (arith -> atom POW atom .)
    (               reduce using rule 58 (arith -> atom POW atom .)
    NUMBER          reduce using rule 58 (arith -> atom POW atom .)
    BOOLEAN         reduce using rule 58 (arith -> atom POW atom .)
    STRING          reduce using rule 58 (arith -> atom POW atom .)
    WORD            reduce using rule 58 (arith -> atom POW atom .)
    FUNCTION        reduce using rule 58 (arith -> atom POW atom .)
    %               reduce using rule 58 (arith -> atom POW atom .)
    {               reduce using rule 58 (arith -> atom POW atom .)
    $end            reduce using rule 58 (arith -> atom POW atom .)
    }               reduce using rule 58 (arith -> atom POW atom .)
    )               reduce using rule 58 (arith -> atom POW atom .)
    ,               reduce using rule 58 (arith -> atom POW atom .)
    ]               reduce using rule 58 (arith -> atom POW atom .)
    +               reduce using rule 58 (arith -> atom POW atom .)
    *               reduce using rule 58 (arith -> atom POW atom .)
    /               reduce using rule 58 (arith -> atom POW atom .)
    &               reduce using rule 58 (arith -> atom POW atom .)
    |               reduce using rule 58 (arith -> atom POW atom .)
    ^               reduce using rule 58 (arith -> atom POW atom .)
    POW             reduce using rule 58 (arith -> atom POW atom .)
    #               reduce using rule 58 (arith -> atom POW atom .)


state 86

    (75) table -> % [ comma_expressions . ]

    ]               shift and go to state 104


state 87

    (61) comma_expressions -> expression . , comma_expressions
    (62) comma_expressions -> expression . ,
    (63) comma_expressions -> expression .

    ,               shift and go to state 105
    ]               reduce using rule 63 (comma_expressions -> expression .)
    )               reduce using rule 63 (comma_expressions -> expression .)


state 88

    (76) table -> % { table_contents . }

    }               shift and go to state 106


state 89

    (69) table_contents -> STRING . : expression , table_contents
    (71) table_contents -> STRING . : expression ,
    (73) table_contents -> STRING . : expression

    :               shift and go to state 107


state 90

    (70) table_contents -> NUMBER . : expression , table_contents
    (72) table_contents -> NUMBER . : expression ,
    (74) table_contents -> NUMBER . : expression

    :               shift and go to state 108


state 91

    (64) arith -> MIN ( comma_expressions . )

    )               shift and go to state 109


state 92

    (65) arith -> MAX ( comma_expressions . )

    )               shift and go to state 110


state 93

    (4) atom -> VARIABLE = expression .

    +               reduce using rule 4 (atom -> VARIABLE = expression .)
    -               reduce using rule 4 (atom -> VARIABLE = expression .)
    *               reduce using rule 4 (atom -> VARIABLE = expression .)
    /               reduce using rule 4 (atom -> VARIABLE = expression .)
    %               reduce using rule 4 (atom -> VARIABLE = expression .)
    &               reduce using rule 4 (atom -> VARIABLE = expression .)
    |               reduce using rule 4 (atom -> VARIABLE = expression .)
    ^               reduce using rule 4 (atom -> VARIABLE = expression .)
    POW             reduce using rule 4 (atom -> VARIABLE = expression .)
    LT              reduce using rule 4 (atom -> VARIABLE = expression .)
    LE              reduce using rule 4 (atom -> VARIABLE = expression .)
    GT              reduce using rule 4 (atom -> VARIABLE = expression .)
    GE              reduce using rule 4 (atom -> VARIABLE = expression .)
    EE              reduce using rule 4 (atom -> VARIABLE = expression .)
    NE              reduce using rule 4 (atom -> VARIABLE = expression .)
    AND             reduce using rule 4 (atom -> VARIABLE = expression .)
    OR              reduce using rule 4 (atom -> VARIABLE = expression .)
    BREAK           reduce using rule 4 (atom -> VARIABLE = expression .)
    RETURN          reduce using rule 4 (atom -> VARIABLE = expression .)
    PASS            reduce using rule 4 (atom -> VARIABLE = expression .)
    MACRO           reduce using rule 4 (atom -> VARIABLE = expression .)
    IF              reduce using rule 4 (atom -> VARIABLE = expression .)
    WHILE           reduce using rule 4 (atom -> VARIABLE = expression .)
    NOT             reduce using rule 4 (atom -> VARIABLE = expression .)
    MIN             reduce using rule 4 (atom -> VARIABLE = expression .)
    MAX             reduce using rule 4 (atom -> VARIABLE = expression .)
    VARIABLE        reduce using rule 4 (atom -> VARIABLE = expression .)
    (               reduce using rule 4 (atom -> VARIABLE = expression .)
    NUMBER          reduce using rule 4 (atom -> VARIABLE = expression .)
    BOOLEAN         reduce using rule 4 (atom -> VARIABLE = expression .)
    STRING          reduce using rule 4 (atom -> VARIABLE = expression .)
    WORD            reduce using rule 4 (atom -> VARIABLE = expression .)
    FUNCTION        reduce using rule 4 (atom -> VARIABLE = expression .)
    {               reduce using rule 4 (atom -> VARIABLE = expression .)
    $end            reduce using rule 4 (atom -> VARIABLE = expression .)
    }               reduce using rule 4 (atom -> VARIABLE = expression .)
    )               reduce using rule 4 (atom -> VARIABLE = expression .)
    ,               reduce using rule 4 (atom -> VARIABLE = expression .)
    ]               reduce using rule 4 (atom -> VARIABLE = expression .)
    #               reduce using rule 4 (atom -> VARIABLE = expression .)


state 94

    (14) function_call -> FUNCTION parameters scope .

    +               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    -               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    *               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    /               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    %               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    &               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    |               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    ^               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    POW             reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    LT              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    LE              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    GT              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    GE              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    EE              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    NE              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    AND             reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    OR              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    BREAK           reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    RETURN          reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    PASS            reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    MACRO           reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    IF              reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    WHILE           reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    NOT             reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    MIN             reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    MAX             reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    VARIABLE        reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    (               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    NUMBER          reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    BOOLEAN         reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    STRING          reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    WORD            reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    FUNCTION        reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    {               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    $end            reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    }               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    )               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    ,               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    ]               reduce using rule 14 (function_call -> FUNCTION parameters scope .)
    #               reduce using rule 14 (function_call -> FUNCTION parameters scope .)


state 95

    (15) function_call -> FUNCTION parameters tag_list .

    +               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    -               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    *               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    /               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    %               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    &               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    |               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    ^               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    POW             reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    LT              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    LE              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    GT              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    GE              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    EE              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    NE              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    AND             reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    OR              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    BREAK           reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    RETURN          reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    PASS            reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    MACRO           reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    IF              reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    WHILE           reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    NOT             reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    MIN             reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    MAX             reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    VARIABLE        reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    (               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    NUMBER          reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    BOOLEAN         reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    STRING          reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    WORD            reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    FUNCTION        reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    {               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    $end            reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    }               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    )               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    ,               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    ]               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)
    #               reduce using rule 15 (function_call -> FUNCTION parameters tag_list .)


state 96

    (19) tag_list -> tag . # scope tag_list
    (20) tag_list -> tag . # scope

    #               shift and go to state 111


state 97

    (18) tag -> TAG . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 112
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 98

    (26) parameters -> ( param_element . )

    )               shift and go to state 113


state 99

    (27) parameters -> ( ) .

    {               reduce using rule 27 (parameters -> ( ) .)
    TAG             reduce using rule 27 (parameters -> ( ) .)
    +               reduce using rule 27 (parameters -> ( ) .)
    -               reduce using rule 27 (parameters -> ( ) .)
    *               reduce using rule 27 (parameters -> ( ) .)
    /               reduce using rule 27 (parameters -> ( ) .)
    %               reduce using rule 27 (parameters -> ( ) .)
    &               reduce using rule 27 (parameters -> ( ) .)
    |               reduce using rule 27 (parameters -> ( ) .)
    ^               reduce using rule 27 (parameters -> ( ) .)
    POW             reduce using rule 27 (parameters -> ( ) .)
    LT              reduce using rule 27 (parameters -> ( ) .)
    LE              reduce using rule 27 (parameters -> ( ) .)
    GT              reduce using rule 27 (parameters -> ( ) .)
    GE              reduce using rule 27 (parameters -> ( ) .)
    EE              reduce using rule 27 (parameters -> ( ) .)
    NE              reduce using rule 27 (parameters -> ( ) .)
    AND             reduce using rule 27 (parameters -> ( ) .)
    OR              reduce using rule 27 (parameters -> ( ) .)
    BREAK           reduce using rule 27 (parameters -> ( ) .)
    RETURN          reduce using rule 27 (parameters -> ( ) .)
    PASS            reduce using rule 27 (parameters -> ( ) .)
    MACRO           reduce using rule 27 (parameters -> ( ) .)
    IF              reduce using rule 27 (parameters -> ( ) .)
    WHILE           reduce using rule 27 (parameters -> ( ) .)
    NOT             reduce using rule 27 (parameters -> ( ) .)
    MIN             reduce using rule 27 (parameters -> ( ) .)
    MAX             reduce using rule 27 (parameters -> ( ) .)
    VARIABLE        reduce using rule 27 (parameters -> ( ) .)
    (               reduce using rule 27 (parameters -> ( ) .)
    NUMBER          reduce using rule 27 (parameters -> ( ) .)
    BOOLEAN         reduce using rule 27 (parameters -> ( ) .)
    STRING          reduce using rule 27 (parameters -> ( ) .)
    WORD            reduce using rule 27 (parameters -> ( ) .)
    FUNCTION        reduce using rule 27 (parameters -> ( ) .)
    $end            reduce using rule 27 (parameters -> ( ) .)
    }               reduce using rule 27 (parameters -> ( ) .)
    )               reduce using rule 27 (parameters -> ( ) .)
    ,               reduce using rule 27 (parameters -> ( ) .)
    ]               reduce using rule 27 (parameters -> ( ) .)
    #               reduce using rule 27 (parameters -> ( ) .)


state 100

    (31) param_element -> expression . , param_element
    (32) param_element -> expression . , param_element_pos
    (33) param_element -> expression . ,
    (34) param_element -> expression .

    ,               shift and go to state 114
    )               reduce using rule 34 (param_element -> expression .)


state 101

    (21) scope -> { expressions } .

    +               reduce using rule 21 (scope -> { expressions } .)
    -               reduce using rule 21 (scope -> { expressions } .)
    *               reduce using rule 21 (scope -> { expressions } .)
    /               reduce using rule 21 (scope -> { expressions } .)
    %               reduce using rule 21 (scope -> { expressions } .)
    &               reduce using rule 21 (scope -> { expressions } .)
    |               reduce using rule 21 (scope -> { expressions } .)
    ^               reduce using rule 21 (scope -> { expressions } .)
    POW             reduce using rule 21 (scope -> { expressions } .)
    LT              reduce using rule 21 (scope -> { expressions } .)
    LE              reduce using rule 21 (scope -> { expressions } .)
    GT              reduce using rule 21 (scope -> { expressions } .)
    GE              reduce using rule 21 (scope -> { expressions } .)
    EE              reduce using rule 21 (scope -> { expressions } .)
    NE              reduce using rule 21 (scope -> { expressions } .)
    AND             reduce using rule 21 (scope -> { expressions } .)
    OR              reduce using rule 21 (scope -> { expressions } .)
    BREAK           reduce using rule 21 (scope -> { expressions } .)
    RETURN          reduce using rule 21 (scope -> { expressions } .)
    PASS            reduce using rule 21 (scope -> { expressions } .)
    MACRO           reduce using rule 21 (scope -> { expressions } .)
    IF              reduce using rule 21 (scope -> { expressions } .)
    WHILE           reduce using rule 21 (scope -> { expressions } .)
    NOT             reduce using rule 21 (scope -> { expressions } .)
    MIN             reduce using rule 21 (scope -> { expressions } .)
    MAX             reduce using rule 21 (scope -> { expressions } .)
    VARIABLE        reduce using rule 21 (scope -> { expressions } .)
    (               reduce using rule 21 (scope -> { expressions } .)
    NUMBER          reduce using rule 21 (scope -> { expressions } .)
    BOOLEAN         reduce using rule 21 (scope -> { expressions } .)
    STRING          reduce using rule 21 (scope -> { expressions } .)
    WORD            reduce using rule 21 (scope -> { expressions } .)
    FUNCTION        reduce using rule 21 (scope -> { expressions } .)
    {               reduce using rule 21 (scope -> { expressions } .)
    $end            reduce using rule 21 (scope -> { expressions } .)
    }               reduce using rule 21 (scope -> { expressions } .)
    )               reduce using rule 21 (scope -> { expressions } .)
    ,               reduce using rule 21 (scope -> { expressions } .)
    ]               reduce using rule 21 (scope -> { expressions } .)
    #               reduce using rule 21 (scope -> { expressions } .)
    ELSEIF          reduce using rule 21 (scope -> { expressions } .)
    ELSE            reduce using rule 21 (scope -> { expressions } .)
    TAG             reduce using rule 21 (scope -> { expressions } .)


state 102

    (10) if_condition -> IF ( expression ) . scope elif_branch
    (11) if_condition -> IF ( expression ) . scope else_branch
    (12) if_condition -> IF ( expression ) . scope
    (21) scope -> . { expressions }
    (22) scope -> . { }

    {               shift and go to state 30

    scope                          shift and go to state 115

state 103

    (13) while_loop -> WHILE ( expression ) . scope
    (21) scope -> . { expressions }
    (22) scope -> . { }

    {               shift and go to state 30

    scope                          shift and go to state 116

state 104

    (75) table -> % [ comma_expressions ] .

    +               reduce using rule 75 (table -> % [ comma_expressions ] .)
    -               reduce using rule 75 (table -> % [ comma_expressions ] .)
    *               reduce using rule 75 (table -> % [ comma_expressions ] .)
    /               reduce using rule 75 (table -> % [ comma_expressions ] .)
    %               reduce using rule 75 (table -> % [ comma_expressions ] .)
    &               reduce using rule 75 (table -> % [ comma_expressions ] .)
    |               reduce using rule 75 (table -> % [ comma_expressions ] .)
    ^               reduce using rule 75 (table -> % [ comma_expressions ] .)
    POW             reduce using rule 75 (table -> % [ comma_expressions ] .)
    LT              reduce using rule 75 (table -> % [ comma_expressions ] .)
    LE              reduce using rule 75 (table -> % [ comma_expressions ] .)
    GT              reduce using rule 75 (table -> % [ comma_expressions ] .)
    GE              reduce using rule 75 (table -> % [ comma_expressions ] .)
    EE              reduce using rule 75 (table -> % [ comma_expressions ] .)
    NE              reduce using rule 75 (table -> % [ comma_expressions ] .)
    AND             reduce using rule 75 (table -> % [ comma_expressions ] .)
    OR              reduce using rule 75 (table -> % [ comma_expressions ] .)
    BREAK           reduce using rule 75 (table -> % [ comma_expressions ] .)
    RETURN          reduce using rule 75 (table -> % [ comma_expressions ] .)
    PASS            reduce using rule 75 (table -> % [ comma_expressions ] .)
    MACRO           reduce using rule 75 (table -> % [ comma_expressions ] .)
    IF              reduce using rule 75 (table -> % [ comma_expressions ] .)
    WHILE           reduce using rule 75 (table -> % [ comma_expressions ] .)
    NOT             reduce using rule 75 (table -> % [ comma_expressions ] .)
    MIN             reduce using rule 75 (table -> % [ comma_expressions ] .)
    MAX             reduce using rule 75 (table -> % [ comma_expressions ] .)
    VARIABLE        reduce using rule 75 (table -> % [ comma_expressions ] .)
    (               reduce using rule 75 (table -> % [ comma_expressions ] .)
    NUMBER          reduce using rule 75 (table -> % [ comma_expressions ] .)
    BOOLEAN         reduce using rule 75 (table -> % [ comma_expressions ] .)
    STRING          reduce using rule 75 (table -> % [ comma_expressions ] .)
    WORD            reduce using rule 75 (table -> % [ comma_expressions ] .)
    FUNCTION        reduce using rule 75 (table -> % [ comma_expressions ] .)
    {               reduce using rule 75 (table -> % [ comma_expressions ] .)
    $end            reduce using rule 75 (table -> % [ comma_expressions ] .)
    }               reduce using rule 75 (table -> % [ comma_expressions ] .)
    )               reduce using rule 75 (table -> % [ comma_expressions ] .)
    ,               reduce using rule 75 (table -> % [ comma_expressions ] .)
    ]               reduce using rule 75 (table -> % [ comma_expressions ] .)
    #               reduce using rule 75 (table -> % [ comma_expressions ] .)


state 105

    (61) comma_expressions -> expression , . comma_expressions
    (62) comma_expressions -> expression , .
    (61) comma_expressions -> . expression , comma_expressions
    (62) comma_expressions -> . expression ,
    (63) comma_expressions -> . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    ]               reduce using rule 62 (comma_expressions -> expression , .)
    )               reduce using rule 62 (comma_expressions -> expression , .)
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 87
    comma_expressions              shift and go to state 117
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 106

    (76) table -> % { table_contents } .

    +               reduce using rule 76 (table -> % { table_contents } .)
    -               reduce using rule 76 (table -> % { table_contents } .)
    *               reduce using rule 76 (table -> % { table_contents } .)
    /               reduce using rule 76 (table -> % { table_contents } .)
    %               reduce using rule 76 (table -> % { table_contents } .)
    &               reduce using rule 76 (table -> % { table_contents } .)
    |               reduce using rule 76 (table -> % { table_contents } .)
    ^               reduce using rule 76 (table -> % { table_contents } .)
    POW             reduce using rule 76 (table -> % { table_contents } .)
    LT              reduce using rule 76 (table -> % { table_contents } .)
    LE              reduce using rule 76 (table -> % { table_contents } .)
    GT              reduce using rule 76 (table -> % { table_contents } .)
    GE              reduce using rule 76 (table -> % { table_contents } .)
    EE              reduce using rule 76 (table -> % { table_contents } .)
    NE              reduce using rule 76 (table -> % { table_contents } .)
    AND             reduce using rule 76 (table -> % { table_contents } .)
    OR              reduce using rule 76 (table -> % { table_contents } .)
    BREAK           reduce using rule 76 (table -> % { table_contents } .)
    RETURN          reduce using rule 76 (table -> % { table_contents } .)
    PASS            reduce using rule 76 (table -> % { table_contents } .)
    MACRO           reduce using rule 76 (table -> % { table_contents } .)
    IF              reduce using rule 76 (table -> % { table_contents } .)
    WHILE           reduce using rule 76 (table -> % { table_contents } .)
    NOT             reduce using rule 76 (table -> % { table_contents } .)
    MIN             reduce using rule 76 (table -> % { table_contents } .)
    MAX             reduce using rule 76 (table -> % { table_contents } .)
    VARIABLE        reduce using rule 76 (table -> % { table_contents } .)
    (               reduce using rule 76 (table -> % { table_contents } .)
    NUMBER          reduce using rule 76 (table -> % { table_contents } .)
    BOOLEAN         reduce using rule 76 (table -> % { table_contents } .)
    STRING          reduce using rule 76 (table -> % { table_contents } .)
    WORD            reduce using rule 76 (table -> % { table_contents } .)
    FUNCTION        reduce using rule 76 (table -> % { table_contents } .)
    {               reduce using rule 76 (table -> % { table_contents } .)
    $end            reduce using rule 76 (table -> % { table_contents } .)
    }               reduce using rule 76 (table -> % { table_contents } .)
    )               reduce using rule 76 (table -> % { table_contents } .)
    ,               reduce using rule 76 (table -> % { table_contents } .)
    ]               reduce using rule 76 (table -> % { table_contents } .)
    #               reduce using rule 76 (table -> % { table_contents } .)


state 107

    (69) table_contents -> STRING : . expression , table_contents
    (71) table_contents -> STRING : . expression ,
    (73) table_contents -> STRING : . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 118
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 108

    (70) table_contents -> NUMBER : . expression , table_contents
    (72) table_contents -> NUMBER : . expression ,
    (74) table_contents -> NUMBER : . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 119
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 109

    (64) arith -> MIN ( comma_expressions ) .

    LT              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    LE              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    GT              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    GE              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    EE              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    NE              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    AND             reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    OR              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    BREAK           reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    RETURN          reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    PASS            reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    MACRO           reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    IF              reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    WHILE           reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    NOT             reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    MIN             reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    MAX             reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    VARIABLE        reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    -               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    (               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    NUMBER          reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    BOOLEAN         reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    STRING          reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    WORD            reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    FUNCTION        reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    %               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    {               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    $end            reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    }               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    )               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    ,               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    ]               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    +               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    *               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    /               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    &               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    |               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    ^               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    POW             reduce using rule 64 (arith -> MIN ( comma_expressions ) .)
    #               reduce using rule 64 (arith -> MIN ( comma_expressions ) .)


state 110

    (65) arith -> MAX ( comma_expressions ) .

    LT              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    LE              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    GT              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    GE              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    EE              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    NE              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    AND             reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    OR              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    BREAK           reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    RETURN          reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    PASS            reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    MACRO           reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    IF              reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    WHILE           reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    NOT             reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    MIN             reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    MAX             reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    VARIABLE        reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    -               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    (               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    NUMBER          reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    BOOLEAN         reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    STRING          reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    WORD            reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    FUNCTION        reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    %               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    {               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    $end            reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    }               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    )               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    ,               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    ]               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    +               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    *               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    /               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    &               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    |               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    ^               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    POW             reduce using rule 65 (arith -> MAX ( comma_expressions ) .)
    #               reduce using rule 65 (arith -> MAX ( comma_expressions ) .)


state 111

    (19) tag_list -> tag # . scope tag_list
    (20) tag_list -> tag # . scope
    (21) scope -> . { expressions }
    (22) scope -> . { }

    {               shift and go to state 30

    scope                          shift and go to state 120

state 112

    (18) tag -> TAG expression .

    #               reduce using rule 18 (tag -> TAG expression .)


state 113

    (26) parameters -> ( param_element ) .

    {               reduce using rule 26 (parameters -> ( param_element ) .)
    TAG             reduce using rule 26 (parameters -> ( param_element ) .)
    +               reduce using rule 26 (parameters -> ( param_element ) .)
    -               reduce using rule 26 (parameters -> ( param_element ) .)
    *               reduce using rule 26 (parameters -> ( param_element ) .)
    /               reduce using rule 26 (parameters -> ( param_element ) .)
    %               reduce using rule 26 (parameters -> ( param_element ) .)
    &               reduce using rule 26 (parameters -> ( param_element ) .)
    |               reduce using rule 26 (parameters -> ( param_element ) .)
    ^               reduce using rule 26 (parameters -> ( param_element ) .)
    POW             reduce using rule 26 (parameters -> ( param_element ) .)
    LT              reduce using rule 26 (parameters -> ( param_element ) .)
    LE              reduce using rule 26 (parameters -> ( param_element ) .)
    GT              reduce using rule 26 (parameters -> ( param_element ) .)
    GE              reduce using rule 26 (parameters -> ( param_element ) .)
    EE              reduce using rule 26 (parameters -> ( param_element ) .)
    NE              reduce using rule 26 (parameters -> ( param_element ) .)
    AND             reduce using rule 26 (parameters -> ( param_element ) .)
    OR              reduce using rule 26 (parameters -> ( param_element ) .)
    BREAK           reduce using rule 26 (parameters -> ( param_element ) .)
    RETURN          reduce using rule 26 (parameters -> ( param_element ) .)
    PASS            reduce using rule 26 (parameters -> ( param_element ) .)
    MACRO           reduce using rule 26 (parameters -> ( param_element ) .)
    IF              reduce using rule 26 (parameters -> ( param_element ) .)
    WHILE           reduce using rule 26 (parameters -> ( param_element ) .)
    NOT             reduce using rule 26 (parameters -> ( param_element ) .)
    MIN             reduce using rule 26 (parameters -> ( param_element ) .)
    MAX             reduce using rule 26 (parameters -> ( param_element ) .)
    VARIABLE        reduce using rule 26 (parameters -> ( param_element ) .)
    (               reduce using rule 26 (parameters -> ( param_element ) .)
    NUMBER          reduce using rule 26 (parameters -> ( param_element ) .)
    BOOLEAN         reduce using rule 26 (parameters -> ( param_element ) .)
    STRING          reduce using rule 26 (parameters -> ( param_element ) .)
    WORD            reduce using rule 26 (parameters -> ( param_element ) .)
    FUNCTION        reduce using rule 26 (parameters -> ( param_element ) .)
    $end            reduce using rule 26 (parameters -> ( param_element ) .)
    }               reduce using rule 26 (parameters -> ( param_element ) .)
    )               reduce using rule 26 (parameters -> ( param_element ) .)
    ,               reduce using rule 26 (parameters -> ( param_element ) .)
    ]               reduce using rule 26 (parameters -> ( param_element ) .)
    #               reduce using rule 26 (parameters -> ( param_element ) .)


state 114

    (31) param_element -> expression , . param_element
    (32) param_element -> expression , . param_element_pos
    (33) param_element -> expression , .
    (31) param_element -> . expression , param_element
    (32) param_element -> . expression , param_element_pos
    (33) param_element -> . expression ,
    (34) param_element -> . expression
    (28) param_element_pos -> . WORD = expression , param_element_pos
    (29) param_element_pos -> . WORD = expression ,
    (30) param_element_pos -> . WORD = expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    )               reduce using rule 33 (param_element -> expression , .)
    WORD            shift and go to state 123
    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 100
    param_element                  shift and go to state 121
    param_element_pos              shift and go to state 122
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 115

    (10) if_condition -> IF ( expression ) scope . elif_branch
    (11) if_condition -> IF ( expression ) scope . else_branch
    (12) if_condition -> IF ( expression ) scope .
    (7) elif_branch -> . ELSEIF ( expression ) scope elif_branch
    (8) elif_branch -> . ELSEIF ( expression ) scope else_branch
    (9) elif_branch -> . ELSEIF ( expression ) scope
    (6) else_branch -> . ELSE scope

    BREAK           reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    RETURN          reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    PASS            reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    MACRO           reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    IF              reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    WHILE           reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    NOT             reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    MIN             reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    MAX             reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    VARIABLE        reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    -               reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    (               reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    NUMBER          reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    BOOLEAN         reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    STRING          reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    WORD            reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    FUNCTION        reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    %               reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    {               reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    $end            reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    }               reduce using rule 12 (if_condition -> IF ( expression ) scope .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    elif_branch                    shift and go to state 124
    else_branch                    shift and go to state 125

state 116

    (13) while_loop -> WHILE ( expression ) scope .

    BREAK           reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    RETURN          reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    PASS            reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    MACRO           reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    IF              reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    WHILE           reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    NOT             reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    MIN             reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    MAX             reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    VARIABLE        reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    -               reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    (               reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    NUMBER          reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    BOOLEAN         reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    STRING          reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    WORD            reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    FUNCTION        reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    %               reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    {               reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    $end            reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)
    }               reduce using rule 13 (while_loop -> WHILE ( expression ) scope .)


state 117

    (61) comma_expressions -> expression , comma_expressions .

    ]               reduce using rule 61 (comma_expressions -> expression , comma_expressions .)
    )               reduce using rule 61 (comma_expressions -> expression , comma_expressions .)


state 118

    (69) table_contents -> STRING : expression . , table_contents
    (71) table_contents -> STRING : expression . ,
    (73) table_contents -> STRING : expression .

    ,               shift and go to state 128
    }               reduce using rule 73 (table_contents -> STRING : expression .)


state 119

    (70) table_contents -> NUMBER : expression . , table_contents
    (72) table_contents -> NUMBER : expression . ,
    (74) table_contents -> NUMBER : expression .

    ,               shift and go to state 129
    }               reduce using rule 74 (table_contents -> NUMBER : expression .)


state 120

    (19) tag_list -> tag # scope . tag_list
    (20) tag_list -> tag # scope .
    (19) tag_list -> . tag # scope tag_list
    (20) tag_list -> . tag # scope
    (18) tag -> . TAG expression

    +               reduce using rule 20 (tag_list -> tag # scope .)
    -               reduce using rule 20 (tag_list -> tag # scope .)
    *               reduce using rule 20 (tag_list -> tag # scope .)
    /               reduce using rule 20 (tag_list -> tag # scope .)
    %               reduce using rule 20 (tag_list -> tag # scope .)
    &               reduce using rule 20 (tag_list -> tag # scope .)
    |               reduce using rule 20 (tag_list -> tag # scope .)
    ^               reduce using rule 20 (tag_list -> tag # scope .)
    POW             reduce using rule 20 (tag_list -> tag # scope .)
    LT              reduce using rule 20 (tag_list -> tag # scope .)
    LE              reduce using rule 20 (tag_list -> tag # scope .)
    GT              reduce using rule 20 (tag_list -> tag # scope .)
    GE              reduce using rule 20 (tag_list -> tag # scope .)
    EE              reduce using rule 20 (tag_list -> tag # scope .)
    NE              reduce using rule 20 (tag_list -> tag # scope .)
    AND             reduce using rule 20 (tag_list -> tag # scope .)
    OR              reduce using rule 20 (tag_list -> tag # scope .)
    BREAK           reduce using rule 20 (tag_list -> tag # scope .)
    RETURN          reduce using rule 20 (tag_list -> tag # scope .)
    PASS            reduce using rule 20 (tag_list -> tag # scope .)
    MACRO           reduce using rule 20 (tag_list -> tag # scope .)
    IF              reduce using rule 20 (tag_list -> tag # scope .)
    WHILE           reduce using rule 20 (tag_list -> tag # scope .)
    NOT             reduce using rule 20 (tag_list -> tag # scope .)
    MIN             reduce using rule 20 (tag_list -> tag # scope .)
    MAX             reduce using rule 20 (tag_list -> tag # scope .)
    VARIABLE        reduce using rule 20 (tag_list -> tag # scope .)
    (               reduce using rule 20 (tag_list -> tag # scope .)
    NUMBER          reduce using rule 20 (tag_list -> tag # scope .)
    BOOLEAN         reduce using rule 20 (tag_list -> tag # scope .)
    STRING          reduce using rule 20 (tag_list -> tag # scope .)
    WORD            reduce using rule 20 (tag_list -> tag # scope .)
    FUNCTION        reduce using rule 20 (tag_list -> tag # scope .)
    {               reduce using rule 20 (tag_list -> tag # scope .)
    $end            reduce using rule 20 (tag_list -> tag # scope .)
    }               reduce using rule 20 (tag_list -> tag # scope .)
    )               reduce using rule 20 (tag_list -> tag # scope .)
    ,               reduce using rule 20 (tag_list -> tag # scope .)
    ]               reduce using rule 20 (tag_list -> tag # scope .)
    #               reduce using rule 20 (tag_list -> tag # scope .)
    TAG             shift and go to state 97

    tag                            shift and go to state 96
    tag_list                       shift and go to state 130

state 121

    (31) param_element -> expression , param_element .

    )               reduce using rule 31 (param_element -> expression , param_element .)


state 122

    (32) param_element -> expression , param_element_pos .

    )               reduce using rule 32 (param_element -> expression , param_element_pos .)


state 123

    (28) param_element_pos -> WORD . = expression , param_element_pos
    (29) param_element_pos -> WORD . = expression ,
    (30) param_element_pos -> WORD . = expression
    (81) atom -> WORD .

    =               shift and go to state 131
    +               reduce using rule 81 (atom -> WORD .)
    -               reduce using rule 81 (atom -> WORD .)
    *               reduce using rule 81 (atom -> WORD .)
    /               reduce using rule 81 (atom -> WORD .)
    %               reduce using rule 81 (atom -> WORD .)
    &               reduce using rule 81 (atom -> WORD .)
    |               reduce using rule 81 (atom -> WORD .)
    ^               reduce using rule 81 (atom -> WORD .)
    POW             reduce using rule 81 (atom -> WORD .)
    LT              reduce using rule 81 (atom -> WORD .)
    LE              reduce using rule 81 (atom -> WORD .)
    GT              reduce using rule 81 (atom -> WORD .)
    GE              reduce using rule 81 (atom -> WORD .)
    EE              reduce using rule 81 (atom -> WORD .)
    NE              reduce using rule 81 (atom -> WORD .)
    AND             reduce using rule 81 (atom -> WORD .)
    OR              reduce using rule 81 (atom -> WORD .)
    ,               reduce using rule 81 (atom -> WORD .)
    )               reduce using rule 81 (atom -> WORD .)


state 124

    (10) if_condition -> IF ( expression ) scope elif_branch .

    BREAK           reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    RETURN          reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    PASS            reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    MACRO           reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    IF              reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    WHILE           reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    NOT             reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    MIN             reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    MAX             reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    VARIABLE        reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    -               reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    (               reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    NUMBER          reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    BOOLEAN         reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    STRING          reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    WORD            reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    FUNCTION        reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    %               reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    {               reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    $end            reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)
    }               reduce using rule 10 (if_condition -> IF ( expression ) scope elif_branch .)


state 125

    (11) if_condition -> IF ( expression ) scope else_branch .

    BREAK           reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    RETURN          reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    PASS            reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    MACRO           reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    IF              reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    WHILE           reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    NOT             reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    MIN             reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    MAX             reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    VARIABLE        reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    -               reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    (               reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    NUMBER          reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    BOOLEAN         reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    STRING          reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    WORD            reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    FUNCTION        reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    %               reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    {               reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    $end            reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)
    }               reduce using rule 11 (if_condition -> IF ( expression ) scope else_branch .)


state 126

    (7) elif_branch -> ELSEIF . ( expression ) scope elif_branch
    (8) elif_branch -> ELSEIF . ( expression ) scope else_branch
    (9) elif_branch -> ELSEIF . ( expression ) scope

    (               shift and go to state 132


state 127

    (6) else_branch -> ELSE . scope
    (21) scope -> . { expressions }
    (22) scope -> . { }

    {               shift and go to state 30

    scope                          shift and go to state 133

state 128

    (69) table_contents -> STRING : expression , . table_contents
    (71) table_contents -> STRING : expression , .
    (69) table_contents -> . STRING : expression , table_contents
    (70) table_contents -> . NUMBER : expression , table_contents
    (71) table_contents -> . STRING : expression ,
    (72) table_contents -> . NUMBER : expression ,
    (73) table_contents -> . STRING : expression
    (74) table_contents -> . NUMBER : expression

    }               reduce using rule 71 (table_contents -> STRING : expression , .)
    STRING          shift and go to state 89
    NUMBER          shift and go to state 90

    table_contents                 shift and go to state 134

state 129

    (70) table_contents -> NUMBER : expression , . table_contents
    (72) table_contents -> NUMBER : expression , .
    (69) table_contents -> . STRING : expression , table_contents
    (70) table_contents -> . NUMBER : expression , table_contents
    (71) table_contents -> . STRING : expression ,
    (72) table_contents -> . NUMBER : expression ,
    (73) table_contents -> . STRING : expression
    (74) table_contents -> . NUMBER : expression

    }               reduce using rule 72 (table_contents -> NUMBER : expression , .)
    STRING          shift and go to state 89
    NUMBER          shift and go to state 90

    table_contents                 shift and go to state 135

state 130

    (19) tag_list -> tag # scope tag_list .

    +               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    -               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    *               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    /               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    %               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    &               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    |               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    ^               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    POW             reduce using rule 19 (tag_list -> tag # scope tag_list .)
    LT              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    LE              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    GT              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    GE              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    EE              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    NE              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    AND             reduce using rule 19 (tag_list -> tag # scope tag_list .)
    OR              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    BREAK           reduce using rule 19 (tag_list -> tag # scope tag_list .)
    RETURN          reduce using rule 19 (tag_list -> tag # scope tag_list .)
    PASS            reduce using rule 19 (tag_list -> tag # scope tag_list .)
    MACRO           reduce using rule 19 (tag_list -> tag # scope tag_list .)
    IF              reduce using rule 19 (tag_list -> tag # scope tag_list .)
    WHILE           reduce using rule 19 (tag_list -> tag # scope tag_list .)
    NOT             reduce using rule 19 (tag_list -> tag # scope tag_list .)
    MIN             reduce using rule 19 (tag_list -> tag # scope tag_list .)
    MAX             reduce using rule 19 (tag_list -> tag # scope tag_list .)
    VARIABLE        reduce using rule 19 (tag_list -> tag # scope tag_list .)
    (               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    NUMBER          reduce using rule 19 (tag_list -> tag # scope tag_list .)
    BOOLEAN         reduce using rule 19 (tag_list -> tag # scope tag_list .)
    STRING          reduce using rule 19 (tag_list -> tag # scope tag_list .)
    WORD            reduce using rule 19 (tag_list -> tag # scope tag_list .)
    FUNCTION        reduce using rule 19 (tag_list -> tag # scope tag_list .)
    {               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    $end            reduce using rule 19 (tag_list -> tag # scope tag_list .)
    }               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    )               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    ,               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    ]               reduce using rule 19 (tag_list -> tag # scope tag_list .)
    #               reduce using rule 19 (tag_list -> tag # scope tag_list .)


state 131

    (28) param_element_pos -> WORD = . expression , param_element_pos
    (29) param_element_pos -> WORD = . expression ,
    (30) param_element_pos -> WORD = . expression
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 136
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27
    scope                          shift and go to state 13

state 132

    (7) elif_branch -> ELSEIF ( . expression ) scope elif_branch
    (8) elif_branch -> ELSEIF ( . expression ) scope else_branch
    (9) elif_branch -> ELSEIF ( . expression ) scope
    (1) expression -> . PASS
    (2) expression -> . MACRO = expression
    (3) expression -> . MACRO
    (83) expression -> . comp
    (40) comp -> . NOT comp
    (41) comp -> . arith LT arith
    (42) comp -> . arith LE arith
    (43) comp -> . arith GT arith
    (44) comp -> . arith GE arith
    (45) comp -> . arith EE arith
    (46) comp -> . arith NE arith
    (47) comp -> . comp AND comp
    (48) comp -> . comp OR comp
    (49) comp -> . arith
    (50) arith -> . atom + atom
    (51) arith -> . atom - atom
    (52) arith -> . atom * atom
    (53) arith -> . atom / atom
    (54) arith -> . atom % atom
    (55) arith -> . atom & atom
    (56) arith -> . atom | atom
    (57) arith -> . atom ^ atom
    (58) arith -> . atom POW atom
    (59) arith -> . atom
    (64) arith -> . MIN ( comma_expressions )
    (65) arith -> . MAX ( comma_expressions )
    (4) atom -> . VARIABLE = expression
    (5) atom -> . VARIABLE
    (39) atom -> . function_call
    (60) atom -> . - atom
    (66) atom -> . ( expression )
    (77) atom -> . NUMBER
    (78) atom -> . BOOLEAN
    (79) atom -> . STRING
    (80) atom -> . table
    (81) atom -> . WORD
    (82) atom -> . scope
    (14) function_call -> . FUNCTION parameters scope
    (15) function_call -> . FUNCTION parameters tag_list
    (16) function_call -> . FUNCTION parameters
    (17) function_call -> . FUNCTION
    (75) table -> . % [ comma_expressions ]
    (76) table -> . % { table_contents }
    (21) scope -> . { expressions }
    (22) scope -> . { }

    PASS            shift and go to state 8
    MACRO           shift and go to state 9
    NOT             shift and go to state 15
    MIN             shift and go to state 20
    MAX             shift and go to state 21
    VARIABLE        shift and go to state 22
    -               shift and go to state 18
    (               shift and go to state 12
    NUMBER          shift and go to state 24
    BOOLEAN         shift and go to state 25
    STRING          shift and go to state 26
    WORD            shift and go to state 28
    FUNCTION        shift and go to state 29
    %               shift and go to state 19
    {               shift and go to state 30

    expression                     shift and go to state 137
    scope                          shift and go to state 13
    comp                           shift and go to state 10
    arith                          shift and go to state 16
    atom                           shift and go to state 17
    function_call                  shift and go to state 23
    table                          shift and go to state 27

state 133

    (6) else_branch -> ELSE scope .

    BREAK           reduce using rule 6 (else_branch -> ELSE scope .)
    RETURN          reduce using rule 6 (else_branch -> ELSE scope .)
    PASS            reduce using rule 6 (else_branch -> ELSE scope .)
    MACRO           reduce using rule 6 (else_branch -> ELSE scope .)
    IF              reduce using rule 6 (else_branch -> ELSE scope .)
    WHILE           reduce using rule 6 (else_branch -> ELSE scope .)
    NOT             reduce using rule 6 (else_branch -> ELSE scope .)
    MIN             reduce using rule 6 (else_branch -> ELSE scope .)
    MAX             reduce using rule 6 (else_branch -> ELSE scope .)
    VARIABLE        reduce using rule 6 (else_branch -> ELSE scope .)
    -               reduce using rule 6 (else_branch -> ELSE scope .)
    (               reduce using rule 6 (else_branch -> ELSE scope .)
    NUMBER          reduce using rule 6 (else_branch -> ELSE scope .)
    BOOLEAN         reduce using rule 6 (else_branch -> ELSE scope .)
    STRING          reduce using rule 6 (else_branch -> ELSE scope .)
    WORD            reduce using rule 6 (else_branch -> ELSE scope .)
    FUNCTION        reduce using rule 6 (else_branch -> ELSE scope .)
    %               reduce using rule 6 (else_branch -> ELSE scope .)
    {               reduce using rule 6 (else_branch -> ELSE scope .)
    $end            reduce using rule 6 (else_branch -> ELSE scope .)
    }               reduce using rule 6 (else_branch -> ELSE scope .)


state 134

    (69) table_contents -> STRING : expression , table_contents .

    }               reduce using rule 69 (table_contents -> STRING : expression , table_contents .)


state 135

    (70) table_contents -> NUMBER : expression , table_contents .

    }               reduce using rule 70 (table_contents -> NUMBER : expression , table_contents .)


state 136

    (28) param_element_pos -> WORD = expression . , param_element_pos
    (29) param_element_pos -> WORD = expression . ,
    (30) param_element_pos -> WORD = expression .

    ,               shift and go to state 138
    )               reduce using rule 30 (param_element_pos -> WORD = expression .)


state 137

    (7) elif_branch -> ELSEIF ( expression . ) scope elif_branch
    (8) elif_branch -> ELSEIF ( expression . ) scope else_branch
    (9) elif_branch -> ELSEIF ( expression . ) scope

    )               shift and go to state 139


state 138

    (28) param_element_pos -> WORD = expression , . param_element_pos
    (29) param_element_pos -> WORD = expression , .
    (28) param_element_pos -> . WORD = expression , param_element_pos
    (29) param_element_pos -> . WORD = expression ,
    (30) param_element_pos -> . WORD = expression

    )               reduce using rule 29 (param_element_pos -> WORD = expression , .)
    WORD            shift and go to state 140

    param_element_pos              shift and go to state 141

state 139

    (7) elif_branch -> ELSEIF ( expression ) . scope elif_branch
    (8) elif_branch -> ELSEIF ( expression ) . scope else_branch
    (9) elif_branch -> ELSEIF ( expression ) . scope
    (21) scope -> . { expressions }
    (22) scope -> . { }

    {               shift and go to state 30

    scope                          shift and go to state 142

state 140

    (28) param_element_pos -> WORD . = expression , param_element_pos
    (29) param_element_pos -> WORD . = expression ,
    (30) param_element_pos -> WORD . = expression

    =               shift and go to state 131


state 141

    (28) param_element_pos -> WORD = expression , param_element_pos .

    )               reduce using rule 28 (param_element_pos -> WORD = expression , param_element_pos .)


state 142

    (7) elif_branch -> ELSEIF ( expression ) scope . elif_branch
    (8) elif_branch -> ELSEIF ( expression ) scope . else_branch
    (9) elif_branch -> ELSEIF ( expression ) scope .
    (7) elif_branch -> . ELSEIF ( expression ) scope elif_branch
    (8) elif_branch -> . ELSEIF ( expression ) scope else_branch
    (9) elif_branch -> . ELSEIF ( expression ) scope
    (6) else_branch -> . ELSE scope

    BREAK           reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    RETURN          reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    PASS            reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    MACRO           reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    IF              reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    WHILE           reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    NOT             reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    MIN             reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    MAX             reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    VARIABLE        reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    -               reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    (               reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    NUMBER          reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    BOOLEAN         reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    STRING          reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    WORD            reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    FUNCTION        reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    %               reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    {               reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    $end            reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    }               reduce using rule 9 (elif_branch -> ELSEIF ( expression ) scope .)
    ELSEIF          shift and go to state 126
    ELSE            shift and go to state 127

    elif_branch                    shift and go to state 143
    else_branch                    shift and go to state 144

state 143

    (7) elif_branch -> ELSEIF ( expression ) scope elif_branch .

    BREAK           reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    RETURN          reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    PASS            reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    MACRO           reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    IF              reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    WHILE           reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    NOT             reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    MIN             reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    MAX             reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    VARIABLE        reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    -               reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    (               reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    NUMBER          reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    BOOLEAN         reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    STRING          reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    WORD            reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    FUNCTION        reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    %               reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    {               reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    $end            reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)
    }               reduce using rule 7 (elif_branch -> ELSEIF ( expression ) scope elif_branch .)


state 144

    (8) elif_branch -> ELSEIF ( expression ) scope else_branch .

    BREAK           reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    RETURN          reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    PASS            reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    MACRO           reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    IF              reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    WHILE           reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    NOT             reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    MIN             reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    MAX             reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    VARIABLE        reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    -               reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    (               reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    NUMBER          reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    BOOLEAN         reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    STRING          reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    WORD            reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    FUNCTION        reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    %               reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    {               reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    $end            reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)
    }               reduce using rule 8 (elif_branch -> ELSEIF ( expression ) scope else_branch .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PASS in state 7 resolved as shift
WARNING: shift/reduce conflict for MACRO in state 7 resolved as shift
WARNING: shift/reduce conflict for NOT in state 7 resolved as shift
WARNING: shift/reduce conflict for MIN in state 7 resolved as shift
WARNING: shift/reduce conflict for MAX in state 7 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 7 resolved as shift
WARNING: shift/reduce conflict for - in state 7 resolved as shift
WARNING: shift/reduce conflict for ( in state 7 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 7 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 7 resolved as shift
WARNING: shift/reduce conflict for STRING in state 7 resolved as shift
WARNING: shift/reduce conflict for WORD in state 7 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 7 resolved as shift
WARNING: shift/reduce conflict for % in state 7 resolved as shift
WARNING: shift/reduce conflict for { in state 7 resolved as shift
WARNING: shift/reduce conflict for AND in state 10 resolved as shift
WARNING: shift/reduce conflict for OR in state 10 resolved as shift
WARNING: shift/reduce conflict for LT in state 16 resolved as shift
WARNING: shift/reduce conflict for LE in state 16 resolved as shift
WARNING: shift/reduce conflict for GT in state 16 resolved as shift
WARNING: shift/reduce conflict for GE in state 16 resolved as shift
WARNING: shift/reduce conflict for EE in state 16 resolved as shift
WARNING: shift/reduce conflict for NE in state 16 resolved as shift
WARNING: shift/reduce conflict for - in state 17 resolved as shift
WARNING: shift/reduce conflict for % in state 17 resolved as shift
WARNING: shift/reduce conflict for + in state 17 resolved as shift
WARNING: shift/reduce conflict for * in state 17 resolved as shift
WARNING: shift/reduce conflict for / in state 17 resolved as shift
WARNING: shift/reduce conflict for & in state 17 resolved as shift
WARNING: shift/reduce conflict for | in state 17 resolved as shift
WARNING: shift/reduce conflict for ^ in state 17 resolved as shift
WARNING: shift/reduce conflict for POW in state 17 resolved as shift
WARNING: shift/reduce conflict for ( in state 29 resolved as shift
WARNING: shift/reduce conflict for } in state 30 resolved as shift
WARNING: shift/reduce conflict for AND in state 39 resolved as shift
WARNING: shift/reduce conflict for OR in state 39 resolved as shift
WARNING: shift/reduce conflict for { in state 61 resolved as shift
WARNING: reduce/reduce conflict in state 2 resolved using rule (expressions -> statement)
WARNING: rejected rule (expressions -> <empty>) in state 2
