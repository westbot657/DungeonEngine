
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "expressionsleft+-left*/leftLTLEGTGEEENEleftANDORAND BOOLEAN BREAK CONTINUE EE ELSE ELSEIF FUNCTION GE GT IF LE LT MACRO MAX MIN NE NOT NUMBER OR RETURN STRING TAG VARIABLE WORDexpression : MACRO '=' expression\n                  | MACROatom : VARIABLE '=' expression\n            | VARIABLEelse_branch : ELSE scopeelif_branch : ELSEIF '(' expression ')' scope elif_branch\n                   | ELSEIF '(' expression ')' scope else_branch\n                   | ELSEIF '(' expression ')' scopeif_condition : IF '(' expression ')' scope elif_branch\n                    | IF '(' expression ')' scope else_branch\n                    | IF '(' expression ')' scopefunction_call : FUNCTION parameters scope\n                     | FUNCTION parameters tag_list\n                     | FUNCTION parameters\n                     | FUNCTIONtag : TAG expressiontag_list : tag '#' scope tag_list\n                | tag '#' scopescope : '{' expressions '}'expressions : statement expressions\n                   | statementparameters : '(' param_element ')'\n                  | '(' ')'param_element_pos : WORD '=' expression ',' param_element_pos\n                         | WORD '=' expression ','\n                         | WORD '=' expressionparam_element : expression ',' param_element\n                     | expression ',' param_element_pos\n                     | expression ','\n                     | expressionstatement : BREAKstatement : expression\n                 | if_conditionatom : function_callcomp : NOT comp\n            | arith LT arith\n            | arith LE arith\n            | arith GT arith\n            | arith GE arith\n            | arith EE arith\n            | arith NE arith\n            | comp AND comp\n            | comp OR comp\n            | aritharith : atom '+' atom\n             | atom '-' atom\n             | atom '*' atom\n             | atom '/' atom\n             | atomatom : '-' atomcomma_expressions : expression ',' comma_expressions\n                         | expression ','\n                         | expressionarith : MIN '(' comma_expressions ')'\n             | MAX '(' comma_expressions ')'atom : '(' expression ')'statement : RETURN expression\n                 | RETURNtable_contents : STRING ':' expression ',' table_contents\n                      | NUMBER ':' expression ',' table_contents\n                      | STRING ':' expression ','\n                      | NUMBER ':' expression ','\n                      | STRING ':' expression\n                      | NUMBER ':' expressiontable : '%' '[' comma_expressions ']'\n             | '%' '{' table_contents '}'atom : NUMBER\n            | BOOLEAN\n            | STRING\n            | table\n            | WORD\n            | scopeexpression : comp"
    
_lr_action_items = {'BREAK':([0,2,3,4,5,6,7,8,11,13,14,18,19,20,21,22,23,24,25,27,29,35,46,50,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,79,85,87,89,92,94,95,98,100,106,107,110,115,124,125,126,],[3,3,-31,-32,-33,-58,-2,-73,-72,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,3,-57,-35,-50,-14,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,-23,-19,-54,-55,-22,-65,-66,-11,-18,-9,-10,-17,-5,-8,-6,-7,]),'RETURN':([0,2,3,4,5,6,7,8,11,13,14,18,19,20,21,22,23,24,25,27,29,35,46,50,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,79,85,87,89,92,94,95,98,100,106,107,110,115,124,125,126,],[6,6,-31,-32,-33,-58,-2,-73,-72,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,6,-57,-35,-50,-14,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,-23,-19,-54,-55,-22,-65,-66,-11,-18,-9,-10,-17,-5,-8,-6,-7,]),'MACRO':([0,2,3,4,5,6,7,8,10,11,13,14,18,19,20,21,22,23,24,25,27,29,30,33,35,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[7,7,-31,-32,-33,7,-2,-73,7,-72,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,7,-57,7,7,-35,-50,7,7,7,-14,7,7,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,7,-23,-19,-54,7,-55,-22,7,-65,-66,7,7,-11,-18,-9,-10,-17,7,7,-5,-8,-6,-7,]),'IF':([0,2,3,4,5,6,7,8,11,13,14,18,19,20,21,22,23,24,25,27,29,35,46,50,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,79,85,87,89,92,94,95,98,100,106,107,110,115,124,125,126,],[9,9,-31,-32,-33,-58,-2,-73,-72,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,9,-57,-35,-50,-14,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,-23,-19,-54,-55,-22,-65,-66,-11,-18,-9,-10,-17,-5,-8,-6,-7,]),'NOT':([0,2,3,4,5,6,7,8,10,11,12,13,14,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[12,12,-31,-32,-33,12,-2,-73,12,-72,12,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,12,-57,12,12,12,12,-35,-50,12,12,12,-14,12,12,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,12,-23,-19,-54,12,-55,-22,12,-65,-66,12,12,-11,-18,-9,-10,-17,12,12,-5,-8,-6,-7,]),'MIN':([0,2,3,4,5,6,7,8,10,11,12,13,14,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[16,16,-31,-32,-33,16,-2,-73,16,-72,16,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,16,-57,16,16,16,16,-35,16,16,16,16,16,16,-50,16,16,16,-14,16,16,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,16,-23,-19,-54,16,-55,-22,16,-65,-66,16,16,-11,-18,-9,-10,-17,16,16,-5,-8,-6,-7,]),'MAX':([0,2,3,4,5,6,7,8,10,11,12,13,14,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[17,17,-31,-32,-33,17,-2,-73,17,-72,17,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,17,-57,17,17,17,17,-35,17,17,17,17,17,17,-50,17,17,17,-14,17,17,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,17,-23,-19,-54,17,-55,-22,17,-65,-66,17,17,-11,-18,-9,-10,-17,17,17,-5,-8,-6,-7,]),'VARIABLE':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[18,18,-31,-32,-33,18,-2,-73,18,-72,18,-44,-49,18,-4,-34,-67,-68,-69,-70,-71,-15,18,-57,18,18,18,18,-35,18,18,18,18,18,18,18,18,18,18,-50,18,18,18,-14,18,18,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,18,-23,-19,-54,18,-55,-22,18,-65,-66,18,18,-11,-18,-9,-10,-17,18,18,-5,-8,-6,-7,]),'-':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,103,106,107,110,111,114,115,124,125,126,],[15,15,-31,-32,-33,15,-2,-73,15,-72,15,-44,43,15,-4,-34,-67,-68,-69,-70,-71,-15,15,-57,15,15,15,15,-35,15,15,15,15,15,15,15,15,15,15,-50,15,15,15,-14,15,15,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,15,-23,-19,-54,15,-55,-22,15,-65,-66,15,15,-11,-18,-71,-9,-10,-17,15,15,-5,-8,-6,-7,]),'(':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,108,110,111,114,115,124,125,126,],[10,10,-31,-32,-33,10,-2,-73,33,10,-72,10,-44,-49,10,47,48,-4,-34,-67,-68,-69,-70,-71,51,10,-57,10,10,10,10,-35,10,10,10,10,10,10,10,10,10,10,-50,10,10,10,-14,10,10,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,10,-23,-19,-54,10,-55,-22,10,-65,-66,10,10,-11,-18,-9,-10,114,-17,10,10,-5,-8,-6,-7,]),'NUMBER':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,112,113,114,115,124,125,126,],[20,20,-31,-32,-33,20,-2,-73,20,-72,20,-44,-49,20,-4,-34,-67,-68,-69,-70,-71,-15,20,-57,20,20,20,20,-35,20,20,20,20,20,20,20,20,20,20,-50,20,20,20,-14,20,20,84,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,20,-23,-19,-54,20,-55,-22,20,-65,-66,20,20,-11,-18,-9,-10,-17,20,84,84,20,-5,-8,-6,-7,]),'BOOLEAN':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[21,21,-31,-32,-33,21,-2,-73,21,-72,21,-44,-49,21,-4,-34,-67,-68,-69,-70,-71,-15,21,-57,21,21,21,21,-35,21,21,21,21,21,21,21,21,21,21,-50,21,21,21,-14,21,21,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,21,-23,-19,-54,21,-55,-22,21,-65,-66,21,21,-11,-18,-9,-10,-17,21,21,-5,-8,-6,-7,]),'STRING':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,112,113,114,115,124,125,126,],[22,22,-31,-32,-33,22,-2,-73,22,-72,22,-44,-49,22,-4,-34,-67,-68,-69,-70,-71,-15,22,-57,22,22,22,22,-35,22,22,22,22,22,22,22,22,22,22,-50,22,22,22,-14,22,22,83,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,22,-23,-19,-54,22,-55,-22,22,-65,-66,22,22,-11,-18,-9,-10,-17,22,83,83,22,-5,-8,-6,-7,]),'WORD':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,120,124,125,126,],[24,24,-31,-32,-33,24,-2,-73,24,-72,24,-44,-49,24,-4,-34,-67,-68,-69,-70,-71,-15,24,-57,24,24,24,24,-35,24,24,24,24,24,24,24,24,24,24,-50,24,24,24,-14,24,24,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,24,-23,-19,-54,24,-55,-22,103,-65,-66,24,24,-11,-18,-9,-10,-17,24,24,-5,122,-8,-6,-7,]),'FUNCTION':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[25,25,-31,-32,-33,25,-2,-73,25,-72,25,-44,-49,25,-4,-34,-67,-68,-69,-70,-71,-15,25,-57,25,25,25,25,-35,25,25,25,25,25,25,25,25,25,25,-50,25,25,25,-14,25,25,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,25,-23,-19,-54,25,-55,-22,25,-65,-66,25,25,-11,-18,-9,-10,-17,25,25,-5,-8,-6,-7,]),'%':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,87,88,89,92,93,94,95,96,97,98,100,106,107,110,111,114,115,124,125,126,],[26,26,-31,-32,-33,26,-2,-73,26,-72,26,-44,-49,26,-4,-34,-67,-68,-69,-70,-71,-15,26,-57,26,26,26,26,-35,26,26,26,26,26,26,26,26,26,26,-50,26,26,26,-14,26,26,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,26,-23,-19,-54,26,-55,-22,26,-65,-66,26,26,-11,-18,-9,-10,-17,26,26,-5,-8,-6,-7,]),'{':([0,2,3,4,5,6,7,8,10,11,12,13,14,15,18,19,20,21,22,23,24,25,26,27,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,77,79,85,86,87,88,89,90,92,93,94,95,96,97,98,100,106,107,109,110,111,114,115,121,124,125,126,],[27,27,-31,-32,-33,27,-2,-73,27,-72,27,-44,-49,27,-4,-34,-67,-68,-69,-70,-71,-15,53,27,-57,27,27,27,27,-35,27,27,27,27,27,27,27,27,27,27,-50,27,27,27,27,27,27,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,27,-23,-19,27,-54,27,-55,27,-22,27,-65,-66,27,27,-11,-18,-9,-10,27,-17,27,27,-5,27,-8,-6,-7,]),'$end':([1,2,3,4,5,6,7,8,11,13,14,18,19,20,21,22,23,24,25,28,29,35,46,50,55,56,57,59,60,61,62,63,64,65,66,67,68,69,73,74,75,79,85,87,89,92,94,95,98,100,106,107,110,115,124,125,126,],[0,-21,-31,-32,-33,-58,-2,-73,-72,-44,-49,-4,-34,-67,-68,-69,-70,-71,-15,-20,-57,-35,-50,-14,-1,-42,-43,-56,-36,-37,-38,-39,-40,-41,-45,-46,-47,-48,-3,-12,-13,-23,-19,-54,-55,-22,-65,-66,-11,-18,-9,-10,-17,-5,-8,-6,-7,]),'}}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,2,27,],[1,28,54,]),'statement':([0,2,27,],[2,2,2,]),'expression':([0,2,6,10,27,30,33,47,48,49,51,52,77,88,93,96,97,111,114,],[4,4,29,34,4,55,58,71,71,73,80,71,91,71,80,104,105,116,119,]),'if_condition':([0,2,27,],[5,5,5,]),'comp':([0,2,6,10,12,27,30,31,32,33,47,48,49,51,52,77,88,93,96,97,111,114,],[8,8,8,8,35,8,8,56,57,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'scope':([0,2,6,10,12,15,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,77,86,88,90,93,96,97,109,111,114,121,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,74,11,11,11,98,11,100,11,11,11,115,11,11,124,]),'arith':([0,2,6,10,12,27,30,31,32,33,36,37,38,39,40,41,47,48,49,51,52,77,88,93,96,97,111,114,],[13,13,13,13,13,13,13,13,13,13,60,61,62,63,64,65,13,13,13,13,13,13,13,13,13,13,13,13,]),'atom':([0,2,6,10,12,15,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,47,48,49,51,52,77,88,93,96,97,111,114,],[14,14,14,14,14,46,14,14,14,14,14,14,14,14,14,14,14,66,67,68,69,14,14,14,14,14,14,14,14,14,14,14,14,]),'function_call':([0,2,6,10,12,15,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,47,48,49,51,52,77,88,93,96,97,111,114,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'table':([0,2,6,10,12,15,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,47,48,49,51,52,77,88,93,96,97,111,114,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'parameters':([25,],[50,]),'comma_expressions':([47,48,52,88,],[70,72,81,99,]),'tag_list':([50,100,],[75,110,]),'tag':([50,100,],[76,76,]),'param_element':([51,93,],[78,101,]),'table_contents':([53,112,113,],[82,117,118,]),'param_element_pos':([93,120,],[102,123,]),'elif_branch':([98,124,],[106,125,]),'else_branch':([98,124,],[107,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('expression -> MACRO = expression','expression',3,'p_macro_statement','EngineScript.py',193),
  ('expression -> MACRO','expression',1,'p_macro_statement','EngineScript.py',194),
  ('atom -> VARIABLE = expression','atom',3,'p_statement_assign','EngineScript.py',205),
  ('atom -> VARIABLE','atom',1,'p_statement_assign','EngineScript.py',206),
  ('else_branch -> ELSE scope','else_branch',2,'p_else_branch','EngineScript.py',215),
  ('elif_branch -> ELSEIF ( expression ) scope elif_branch','elif_branch',6,'p_elif_branch','EngineScript.py',221),
  ('elif_branch -> ELSEIF ( expression ) scope else_branch','elif_branch',6,'p_elif_branch','EngineScript.py',222),
  ('elif_branch -> ELSEIF ( expression ) scope','elif_branch',5,'p_elif_branch','EngineScript.py',223),
  ('if_condition -> IF ( expression ) scope elif_branch','if_condition',6,'p_if_statement','EngineScript.py',235),
  ('if_condition -> IF ( expression ) scope else_branch','if_condition',6,'p_if_statement','EngineScript.py',236),
  ('if_condition -> IF ( expression ) scope','if_condition',5,'p_if_statement','EngineScript.py',237),
  ('function_call -> FUNCTION parameters scope','function_call',3,'p_function_call','EngineScript.py',247),
  ('function_call -> FUNCTION parameters tag_list','function_call',3,'p_function_call','EngineScript.py',248),
  ('function_call -> FUNCTION parameters','function_call',2,'p_function_call','EngineScript.py',249),
  ('function_call -> FUNCTION','function_call',1,'p_function_call','EngineScript.py',250),
  ('tag -> TAG expression','tag',2,'p_tag','EngineScript.py',438),
  ('tag_list -> tag # scope tag_list','tag_list',4,'p_tag_list','EngineScript.py',445),
  ('tag_list -> tag # scope','tag_list',3,'p_tag_list','EngineScript.py',446),
  ('scope -> { expressions }','scope',3,'p_scope','EngineScript.py',460),
  ('expressions -> statement expressions','expressions',2,'p_statements','EngineScript.py',464),
  ('expressions -> statement','expressions',1,'p_statements','EngineScript.py',465),
  ('parameters -> ( param_element )','parameters',3,'p_parameters','EngineScript.py',476),
  ('parameters -> ( )','parameters',2,'p_parameters','EngineScript.py',477),
  ('param_element_pos -> WORD = expression , param_element_pos','param_element_pos',5,'p_param_element2','EngineScript.py',484),
  ('param_element_pos -> WORD = expression ,','param_element_pos',4,'p_param_element2','EngineScript.py',485),
  ('param_element_pos -> WORD = expression','param_element_pos',3,'p_param_element2','EngineScript.py',486),
  ('param_element -> expression , param_element','param_element',3,'p_param_element','EngineScript.py',497),
  ('param_element -> expression , param_element_pos','param_element',3,'p_param_element','EngineScript.py',498),
  ('param_element -> expression ,','param_element',2,'p_param_element','EngineScript.py',499),
  ('param_element -> expression','param_element',1,'p_param_element','EngineScript.py',500),
  ('statement -> BREAK','statement',1,'p_statement_break','EngineScript.py',511),
  ('statement -> expression','statement',1,'p_statement_expr','EngineScript.py',515),
  ('statement -> if_condition','statement',1,'p_statement_expr','EngineScript.py',516),
  ('atom -> function_call','atom',1,'p_expression_function_call','EngineScript.py',520),
  ('comp -> NOT comp','comp',2,'p_comp_expression','EngineScript.py',524),
  ('comp -> arith LT arith','comp',3,'p_comp_expression','EngineScript.py',525),
  ('comp -> arith LE arith','comp',3,'p_comp_expression','EngineScript.py',526),
  ('comp -> arith GT arith','comp',3,'p_comp_expression','EngineScript.py',527),
  ('comp -> arith GE arith','comp',3,'p_comp_expression','EngineScript.py',528),
  ('comp -> arith EE arith','comp',3,'p_comp_expression','EngineScript.py',529),
  ('comp -> arith NE arith','comp',3,'p_comp_expression','EngineScript.py',530),
  ('comp -> comp AND comp','comp',3,'p_comp_expression','EngineScript.py',531),
  ('comp -> comp OR comp','comp',3,'p_comp_expression','EngineScript.py',532),
  ('comp -> arith','comp',1,'p_comp_expression','EngineScript.py',533),
  ('arith -> atom + atom','arith',3,'p_expression_binop','EngineScript.py',582),
  ('arith -> atom - atom','arith',3,'p_expression_binop','EngineScript.py',583),
  ('arith -> atom * atom','arith',3,'p_expression_binop','EngineScript.py',584),
  ('arith -> atom / atom','arith',3,'p_expression_binop','EngineScript.py',585),
  ('arith -> atom','arith',1,'p_expression_binop','EngineScript.py',586),
  ('atom -> - atom','atom',2,'p_expression_uminus','EngineScript.py',616),
  ('comma_expressions -> expression , comma_expressions','comma_expressions',3,'p_comma_sep_expressions','EngineScript.py',627),
  ('comma_expressions -> expression ,','comma_expressions',2,'p_comma_sep_expressions','EngineScript.py',628),
  ('comma_expressions -> expression','comma_expressions',1,'p_comma_sep_expressions','EngineScript.py',629),
  ('arith -> MIN ( comma_expressions )','arith',4,'p_expression_min','EngineScript.py',636),
  ('arith -> MAX ( comma_expressions )','arith',4,'p_expression_min','EngineScript.py',637),
  ('atom -> ( expression )','atom',3,'p_expression_group','EngineScript.py',649),
  ('statement -> RETURN expression','statement',2,'p_expression_return','EngineScript.py',653),
  ('statement -> RETURN','statement',1,'p_expression_return','EngineScript.py',654),
  ('table_contents -> STRING : expression , table_contents','table_contents',5,'p_table_contents','EngineScript.py',661),
  ('table_contents -> NUMBER : expression , table_contents','table_contents',5,'p_table_contents','EngineScript.py',662),
  ('table_contents -> STRING : expression ,','table_contents',4,'p_table_contents','EngineScript.py',663),
  ('table_contents -> NUMBER : expression ,','table_contents',4,'p_table_contents','EngineScript.py',664),
  ('table_contents -> STRING : expression','table_contents',3,'p_table_contents','EngineScript.py',665),
  ('table_contents -> NUMBER : expression','table_contents',3,'p_table_contents','EngineScript.py',666),
  ('table -> % [ comma_expressions ]','table',4,'p_table','EngineScript.py',678),
  ('table -> % { table_contents }','table',4,'p_table','EngineScript.py',679),
  ('atom -> NUMBER','atom',1,'p_expression_other','EngineScript.py',694),
  ('atom -> BOOLEAN','atom',1,'p_expression_other','EngineScript.py',695),
  ('atom -> STRING','atom',1,'p_expression_other','EngineScript.py',696),
  ('atom -> table','atom',1,'p_expression_other','EngineScript.py',697),
  ('atom -> WORD','atom',1,'p_expression_other','EngineScript.py',698),
  ('atom -> scope','atom',1,'p_expression_other','EngineScript.py',699),
  ('expression -> comp','expression',1,'p_expression_comp','EngineScript.py',706),
]
