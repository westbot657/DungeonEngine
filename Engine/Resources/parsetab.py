
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleft+-left*/leftLTLEGTGEEENEleftANDORAND BOOLEAN BREAK CONTINUE EE ELSE ELSEIF FUNCTION GE GT IF LE LT MAX MIN NE NOT NUMBER OR RETURN STRING TAG VARIABLE WORDatom : VARIABLE "=" expression\n            | VARIABLEelse_branch : ELSE scopeelif_branch : ELSEIF \'(\' expression \')\' scope elif_branch\n                   | ELSEIF \'(\' expression \')\' scope else_branch\n                   | ELSEIF \'(\' expression \')\' scopeif_condition : IF \'(\' expression \')\' scope elif_branch\n                    | IF \'(\' expression \')\' scope else_branch\n                    | IF \'(\' expression \')\' scopefunction_call : FUNCTION parameters scope\n                     | FUNCTION parameters tag_list\n                     | FUNCTION parameters\n                     | FUNCTIONtag : TAG expressiontag_list : tag \'#\' scope tag_list\n                | tag \'#\' scopescope : \'{\' expressions \'}\'expressions : statement expressions\n                   | statementparameters : \'(\' param_element \')\'\n                  | \'(\' \')\'param_element_pos : WORD \'=\' expression \',\' param_element_pos\n                         | WORD \'=\' expression \',\'\n                         | WORD \'=\' expressionparam_element : expression \',\' param_element\n                     | expression \',\' param_element_pos\n                     | expression \',\'\n                     | expressionstatement : BREAKstatement : expression\n                 | if_conditionatom : function_callcomp : NOT comp\n            | arith LT arith\n            | arith LE arith\n            | arith GT arith\n            | arith GE arith\n            | arith EE arith\n            | arith NE arith\n            | comp AND comp\n            | comp OR comp\n            | aritharith : atom \'+\' atom\n             | atom \'-\' atom\n             | atom \'*\' atom\n             | atom \'/\' atom\n             | atomatom : \'-\' atomcomma_expressions : expression \',\' comma_expressions\n                         | expression \',\'\n                         | expressionarith : MIN \'(\' comma_expressions \')\'\n             | MAX \'(\' comma_expressions \')\'atom : \'(\' expression \')\'statement : RETURN expression\n                 | RETURNtable_contents : STRING \':\' expression \',\' table_contents\n                      | NUMBER \':\' expression \',\' table_contents\n                      | STRING \':\' expression \',\'\n                      | NUMBER \':\' expression \',\'\n                      | STRING \':\' expression\n                      | NUMBER \':\' expressiontable : \'%\' \'[\' comma_expressions \']\'\n             | \'%\' \'{\' table_contents \'}\'atom : NUMBER\n            | BOOLEAN\n            | STRING\n            | table\n            | WORD\n            | scopeexpression : comp'
    
_lr_action_items = {'BREAK':([0,2,3,4,5,6,7,10,12,13,17,18,19,20,21,22,23,24,26,28,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,95,97,103,104,107,112,121,122,123,],[3,3,-29,-30,-31,-56,-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,3,-55,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-9,-16,-7,-8,-15,-3,-6,-4,-5,]),'RETURN':([0,2,3,4,5,6,7,10,12,13,17,18,19,20,21,22,23,24,26,28,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,95,97,103,104,107,112,121,122,123,],[6,6,-29,-30,-31,-56,-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,6,-55,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-9,-16,-7,-8,-15,-3,-6,-4,-5,]),'IF':([0,2,3,4,5,6,7,10,12,13,17,18,19,20,21,22,23,24,26,28,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,95,97,103,104,107,112,121,122,123,],[8,8,-29,-30,-31,-56,-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,8,-55,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-9,-16,-7,-8,-15,-3,-6,-4,-5,]),'NOT':([0,2,3,4,5,6,7,9,10,11,12,13,17,18,19,20,21,22,23,24,26,28,29,30,31,33,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[11,11,-29,-30,-31,11,-71,11,-70,11,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,11,-55,11,11,11,-33,-48,11,11,11,-12,11,11,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,11,-21,-17,-52,11,-53,-20,11,-63,-64,11,11,-9,-16,-7,-8,-15,11,11,-3,-6,-4,-5,]),'MIN':([0,2,3,4,5,6,7,9,10,11,12,13,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[15,15,-29,-30,-31,15,-71,15,-70,15,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,15,-55,15,15,15,-33,15,15,15,15,15,15,-48,15,15,15,-12,15,15,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,15,-21,-17,-52,15,-53,-20,15,-63,-64,15,15,-9,-16,-7,-8,-15,15,15,-3,-6,-4,-5,]),'MAX':([0,2,3,4,5,6,7,9,10,11,12,13,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[16,16,-29,-30,-31,16,-71,16,-70,16,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,16,-55,16,16,16,-33,16,16,16,16,16,16,-48,16,16,16,-12,16,16,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,16,-21,-17,-52,16,-53,-20,16,-63,-64,16,16,-9,-16,-7,-8,-15,16,16,-3,-6,-4,-5,]),'VARIABLE':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[17,17,-29,-30,-31,17,-71,17,-70,17,-42,-47,17,-2,-32,-65,-66,-67,-68,-69,-13,17,-55,17,17,17,-33,17,17,17,17,17,17,17,17,17,17,-48,17,17,17,-12,17,17,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,17,-21,-17,-52,17,-53,-20,17,-63,-64,17,17,-9,-16,-7,-8,-15,17,17,-3,-6,-4,-5,]),'-':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,100,103,104,107,108,111,112,121,122,123,],[14,14,-29,-30,-31,14,-71,14,-70,14,-42,41,14,-2,-32,-65,-66,-67,-68,-69,-13,14,-55,14,14,14,-33,14,14,14,14,14,14,14,14,14,14,-48,14,14,14,-12,14,14,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,14,-21,-17,-52,14,-53,-20,14,-63,-64,14,14,-9,-16,-69,-7,-8,-15,14,14,-3,-6,-4,-5,]),'(':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,105,107,108,111,112,121,122,123,],[9,9,-29,-30,-31,9,-71,31,9,-70,9,-42,-47,9,45,46,-2,-32,-65,-66,-67,-68,-69,49,9,-55,9,9,9,-33,9,9,9,9,9,9,9,9,9,9,-48,9,9,9,-12,9,9,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,9,-21,-17,-52,9,-53,-20,9,-63,-64,9,9,-9,-16,-7,-8,111,-15,9,9,-3,-6,-4,-5,]),'NUMBER':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,109,110,111,112,121,122,123,],[19,19,-29,-30,-31,19,-71,19,-70,19,-42,-47,19,-2,-32,-65,-66,-67,-68,-69,-13,19,-55,19,19,19,-33,19,19,19,19,19,19,19,19,19,19,-48,19,19,19,-12,19,19,81,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,19,-21,-17,-52,19,-53,-20,19,-63,-64,19,19,-9,-16,-7,-8,-15,19,81,81,19,-3,-6,-4,-5,]),'BOOLEAN':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[20,20,-29,-30,-31,20,-71,20,-70,20,-42,-47,20,-2,-32,-65,-66,-67,-68,-69,-13,20,-55,20,20,20,-33,20,20,20,20,20,20,20,20,20,20,-48,20,20,20,-12,20,20,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,20,-21,-17,-52,20,-53,-20,20,-63,-64,20,20,-9,-16,-7,-8,-15,20,20,-3,-6,-4,-5,]),'STRING':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,109,110,111,112,121,122,123,],[21,21,-29,-30,-31,21,-71,21,-70,21,-42,-47,21,-2,-32,-65,-66,-67,-68,-69,-13,21,-55,21,21,21,-33,21,21,21,21,21,21,21,21,21,21,-48,21,21,21,-12,21,21,80,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,21,-21,-17,-52,21,-53,-20,21,-63,-64,21,21,-9,-16,-7,-8,-15,21,80,80,21,-3,-6,-4,-5,]),'WORD':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,117,121,122,123,],[23,23,-29,-30,-31,23,-71,23,-70,23,-42,-47,23,-2,-32,-65,-66,-67,-68,-69,-13,23,-55,23,23,23,-33,23,23,23,23,23,23,23,23,23,23,-48,23,23,23,-12,23,23,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,23,-21,-17,-52,23,-53,-20,100,-63,-64,23,23,-9,-16,-7,-8,-15,23,23,-3,119,-6,-4,-5,]),'FUNCTION':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[24,24,-29,-30,-31,24,-71,24,-70,24,-42,-47,24,-2,-32,-65,-66,-67,-68,-69,-13,24,-55,24,24,24,-33,24,24,24,24,24,24,24,24,24,24,-48,24,24,24,-12,24,24,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,24,-21,-17,-52,24,-53,-20,24,-63,-64,24,24,-9,-16,-7,-8,-15,24,24,-3,-6,-4,-5,]),'%':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,84,85,86,89,90,91,92,93,94,95,97,103,104,107,108,111,112,121,122,123,],[25,25,-29,-30,-31,25,-71,25,-70,25,-42,-47,25,-2,-32,-65,-66,-67,-68,-69,-13,25,-55,25,25,25,-33,25,25,25,25,25,25,25,25,25,25,-48,25,25,25,-12,25,25,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,25,-21,-17,-52,25,-53,-20,25,-63,-64,25,25,-9,-16,-7,-8,-15,25,25,-3,-6,-4,-5,]),'{':([0,2,3,4,5,6,7,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,74,76,82,83,84,85,86,87,89,90,91,92,93,94,95,97,103,104,106,107,108,111,112,118,121,122,123,],[26,26,-29,-30,-31,26,-71,26,-70,26,-42,-47,26,-2,-32,-65,-66,-67,-68,-69,-13,51,26,-55,26,26,26,-33,26,26,26,26,26,26,26,26,26,26,-48,26,26,26,26,26,26,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,26,-21,-17,26,-52,26,-53,26,-20,26,-63,-64,26,26,-9,-16,-7,-8,26,-15,26,26,-3,26,-6,-4,-5,]),'$end':([1,2,3,4,5,6,7,10,12,13,17,18,19,20,21,22,23,24,27,28,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,95,97,103,104,107,112,121,122,123,],[0,-19,-29,-30,-31,-56,-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,-18,-55,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-9,-16,-7,-8,-15,-3,-6,-4,-5,]),'}':([2,3,4,5,6,7,10,12,13,17,18,19,20,21,22,23,24,27,28,33,44,48,52,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,79,82,84,86,89,91,92,95,97,101,102,103,104,107,109,110,112,114,115,121,122,123,],[-19,-29,-30,-31,-56,-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,-18,-55,-33,-48,-12,82,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,92,-17,-52,-53,-20,-63,-64,-9,-16,-61,-62,-7,-8,-15,-59,-60,-3,-57,-58,-6,-4,-5,]),')':([7,10,12,13,17,18,19,20,21,22,23,24,32,33,44,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,75,76,77,82,84,85,86,89,90,91,92,96,97,98,99,100,107,113,116,117,120,],[-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,56,-33,-48,-12,76,-40,-41,83,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,84,-51,86,-1,-10,-11,89,-21,-28,-17,-52,-50,-53,-20,-27,-63,-64,-49,-16,-25,-26,-69,-15,-24,118,-23,-22,]),',':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,68,70,71,72,76,77,82,84,86,89,91,92,97,100,101,102,107,113,],[-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,85,-1,-10,-11,-21,90,-17,-52,-53,-20,-63,-64,-16,-69,109,110,-15,117,]),'AND':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[29,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,29,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'OR':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[30,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,30,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'+':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,-42,40,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'*':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,-42,42,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'/':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,-42,43,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'LT':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,34,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'LE':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,35,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'GT':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,36,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'GE':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,37,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'EE':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,38,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),'NE':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,76,82,84,86,89,91,92,97,100,107,],[-71,-70,39,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,-21,-17,-52,-53,-20,-63,-64,-16,-69,-15,]),']':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,68,70,71,72,76,78,82,84,85,86,89,91,92,96,97,107,],[-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-51,-1,-10,-11,-21,91,-17,-52,-50,-53,-20,-63,-64,-49,-16,-15,]),'#':([7,10,12,13,17,18,19,20,21,22,23,24,33,44,48,53,54,56,57,58,59,60,61,62,63,64,65,66,70,71,72,73,76,82,84,86,88,89,91,92,97,107,],[-71,-70,-42,-47,-2,-32,-65,-66,-67,-68,-69,-13,-33,-48,-12,-40,-41,-54,-34,-35,-36,-37,-38,-39,-43,-44,-45,-46,-1,-10,-11,87,-21,-17,-52,-53,-14,-20,-63,-64,-16,-15,]),'=':([17,100,119,],[47,108,108,]),'[':([25,],[50,]),'TAG':([48,76,82,89,97,],[74,-21,-17,-20,74,]),':':([80,81,],[93,94,]),'ELSEIF':([82,95,121,],[-17,105,105,]),'ELSE':([82,95,121,],[-17,106,106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,2,26,],[1,27,52,]),'statement':([0,2,26,],[2,2,2,]),'expression':([0,2,6,9,26,31,45,46,47,49,50,74,85,90,93,94,108,111,],[4,4,28,32,4,55,68,68,70,77,68,88,68,77,101,102,113,116,]),'if_condition':([0,2,26,],[5,5,5,]),'comp':([0,2,6,9,11,26,29,30,31,45,46,47,49,50,74,85,90,93,94,108,111,],[7,7,7,7,33,7,53,54,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'scope':([0,2,6,9,11,14,26,29,30,31,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,74,83,85,87,90,93,94,106,108,111,118,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,71,10,10,10,95,10,97,10,10,10,112,10,10,121,]),'arith':([0,2,6,9,11,26,29,30,31,34,35,36,37,38,39,45,46,47,49,50,74,85,90,93,94,108,111,],[12,12,12,12,12,12,12,12,12,57,58,59,60,61,62,12,12,12,12,12,12,12,12,12,12,12,12,]),'atom':([0,2,6,9,11,14,26,29,30,31,34,35,36,37,38,39,40,41,42,43,45,46,47,49,50,74,85,90,93,94,108,111,],[13,13,13,13,13,44,13,13,13,13,13,13,13,13,13,13,63,64,65,66,13,13,13,13,13,13,13,13,13,13,13,13,]),'function_call':([0,2,6,9,11,14,26,29,30,31,34,35,36,37,38,39,40,41,42,43,45,46,47,49,50,74,85,90,93,94,108,111,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'table':([0,2,6,9,11,14,26,29,30,31,34,35,36,37,38,39,40,41,42,43,45,46,47,49,50,74,85,90,93,94,108,111,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'parameters':([24,],[48,]),'comma_expressions':([45,46,50,85,],[67,69,78,96,]),'tag_list':([48,97,],[72,107,]),'tag':([48,97,],[73,73,]),'param_element':([49,90,],[75,98,]),'table_contents':([51,109,110,],[79,114,115,]),'param_element_pos':([90,117,],[99,120,]),'elif_branch':([95,121,],[103,122,]),'else_branch':([95,121,],[104,123,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('atom -> VARIABLE = expression','atom',3,'p_statement_assign','EngineScript.py',169),
  ('atom -> VARIABLE','atom',1,'p_statement_assign','EngineScript.py',170),
  ('else_branch -> ELSE scope','else_branch',2,'p_else_branch','EngineScript.py',177),
  ('elif_branch -> ELSEIF ( expression ) scope elif_branch','elif_branch',6,'p_elif_branch','EngineScript.py',183),
  ('elif_branch -> ELSEIF ( expression ) scope else_branch','elif_branch',6,'p_elif_branch','EngineScript.py',184),
  ('elif_branch -> ELSEIF ( expression ) scope','elif_branch',5,'p_elif_branch','EngineScript.py',185),
  ('if_condition -> IF ( expression ) scope elif_branch','if_condition',6,'p_if_statement','EngineScript.py',197),
  ('if_condition -> IF ( expression ) scope else_branch','if_condition',6,'p_if_statement','EngineScript.py',198),
  ('if_condition -> IF ( expression ) scope','if_condition',5,'p_if_statement','EngineScript.py',199),
  ('function_call -> FUNCTION parameters scope','function_call',3,'p_function_call','EngineScript.py',209),
  ('function_call -> FUNCTION parameters tag_list','function_call',3,'p_function_call','EngineScript.py',210),
  ('function_call -> FUNCTION parameters','function_call',2,'p_function_call','EngineScript.py',211),
  ('function_call -> FUNCTION','function_call',1,'p_function_call','EngineScript.py',212),
  ('tag -> TAG expression','tag',2,'p_tag','EngineScript.py',398),
  ('tag_list -> tag # scope tag_list','tag_list',4,'p_tag_list','EngineScript.py',405),
  ('tag_list -> tag # scope','tag_list',3,'p_tag_list','EngineScript.py',406),
  ('scope -> { expressions }','scope',3,'p_scope','EngineScript.py',420),
  ('expressions -> statement expressions','expressions',2,'p_statements','EngineScript.py',424),
  ('expressions -> statement','expressions',1,'p_statements','EngineScript.py',425),
  ('parameters -> ( param_element )','parameters',3,'p_parameters','EngineScript.py',436),
  ('parameters -> ( )','parameters',2,'p_parameters','EngineScript.py',437),
  ('param_element_pos -> WORD = expression , param_element_pos','param_element_pos',5,'p_param_element2','EngineScript.py',444),
  ('param_element_pos -> WORD = expression ,','param_element_pos',4,'p_param_element2','EngineScript.py',445),
  ('param_element_pos -> WORD = expression','param_element_pos',3,'p_param_element2','EngineScript.py',446),
  ('param_element -> expression , param_element','param_element',3,'p_param_element','EngineScript.py',457),
  ('param_element -> expression , param_element_pos','param_element',3,'p_param_element','EngineScript.py',458),
  ('param_element -> expression ,','param_element',2,'p_param_element','EngineScript.py',459),
  ('param_element -> expression','param_element',1,'p_param_element','EngineScript.py',460),
  ('statement -> BREAK','statement',1,'p_statement_break','EngineScript.py',471),
  ('statement -> expression','statement',1,'p_statement_expr','EngineScript.py',475),
  ('statement -> if_condition','statement',1,'p_statement_expr','EngineScript.py',476),
  ('atom -> function_call','atom',1,'p_expression_function_call','EngineScript.py',480),
  ('comp -> NOT comp','comp',2,'p_comp_expression','EngineScript.py',484),
  ('comp -> arith LT arith','comp',3,'p_comp_expression','EngineScript.py',485),
  ('comp -> arith LE arith','comp',3,'p_comp_expression','EngineScript.py',486),
  ('comp -> arith GT arith','comp',3,'p_comp_expression','EngineScript.py',487),
  ('comp -> arith GE arith','comp',3,'p_comp_expression','EngineScript.py',488),
  ('comp -> arith EE arith','comp',3,'p_comp_expression','EngineScript.py',489),
  ('comp -> arith NE arith','comp',3,'p_comp_expression','EngineScript.py',490),
  ('comp -> comp AND comp','comp',3,'p_comp_expression','EngineScript.py',491),
  ('comp -> comp OR comp','comp',3,'p_comp_expression','EngineScript.py',492),
  ('comp -> arith','comp',1,'p_comp_expression','EngineScript.py',493),
  ('arith -> atom + atom','arith',3,'p_expression_binop','EngineScript.py',542),
  ('arith -> atom - atom','arith',3,'p_expression_binop','EngineScript.py',543),
  ('arith -> atom * atom','arith',3,'p_expression_binop','EngineScript.py',544),
  ('arith -> atom / atom','arith',3,'p_expression_binop','EngineScript.py',545),
  ('arith -> atom','arith',1,'p_expression_binop','EngineScript.py',546),
  ('atom -> - atom','atom',2,'p_expression_uminus','EngineScript.py',576),
  ('comma_expressions -> expression , comma_expressions','comma_expressions',3,'p_comma_sep_expressions','EngineScript.py',587),
  ('comma_expressions -> expression ,','comma_expressions',2,'p_comma_sep_expressions','EngineScript.py',588),
  ('comma_expressions -> expression','comma_expressions',1,'p_comma_sep_expressions','EngineScript.py',589),
  ('arith -> MIN ( comma_expressions )','arith',4,'p_expression_min','EngineScript.py',596),
  ('arith -> MAX ( comma_expressions )','arith',4,'p_expression_min','EngineScript.py',597),
  ('atom -> ( expression )','atom',3,'p_expression_group','EngineScript.py',609),
  ('statement -> RETURN expression','statement',2,'p_expression_return','EngineScript.py',613),
  ('statement -> RETURN','statement',1,'p_expression_return','EngineScript.py',614),
  ('table_contents -> STRING : expression , table_contents','table_contents',5,'p_table_contents','EngineScript.py',621),
  ('table_contents -> NUMBER : expression , table_contents','table_contents',5,'p_table_contents','EngineScript.py',622),
  ('table_contents -> STRING : expression ,','table_contents',4,'p_table_contents','EngineScript.py',623),
  ('table_contents -> NUMBER : expression ,','table_contents',4,'p_table_contents','EngineScript.py',624),
  ('table_contents -> STRING : expression','table_contents',3,'p_table_contents','EngineScript.py',625),
  ('table_contents -> NUMBER : expression','table_contents',3,'p_table_contents','EngineScript.py',626),
  ('table -> % [ comma_expressions ]','table',4,'p_table','EngineScript.py',638),
  ('table -> % { table_contents }','table',4,'p_table','EngineScript.py',639),
  ('atom -> NUMBER','atom',1,'p_expression_other','EngineScript.py',654),
  ('atom -> BOOLEAN','atom',1,'p_expression_other','EngineScript.py',655),
  ('atom -> STRING','atom',1,'p_expression_other','EngineScript.py',656),
  ('atom -> table','atom',1,'p_expression_other','EngineScript.py',657),
  ('atom -> WORD','atom',1,'p_expression_other','EngineScript.py',658),
  ('atom -> scope','atom',1,'p_expression_other','EngineScript.py',659),
  ('expression -> comp','expression',1,'p_expression_comp','EngineScript.py',666),
]
